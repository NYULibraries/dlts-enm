// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Epub represents a row from 'enm.epubs'.
type Epub struct {
	TctID          int            `json:"tct_id"`          // tct_id
	Title          string         `json:"title"`           // title
	Author         string         `json:"author"`          // author
	Publisher      string         `json:"publisher"`       // publisher
	Isbn           sql.NullString `json:"isbn"`            // isbn
	IndexpatternID int            `json:"indexpattern_id"` // indexpattern_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Epub exists in the database.
func (e *Epub) Exists() bool {
	return e._exists
}

// Deleted provides information if the Epub has been deleted from the database.
func (e *Epub) Deleted() bool {
	return e._deleted
}

// Insert inserts the Epub to the database.
func (e *Epub) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO enm.epubs (` +
		`tct_id, title, author, publisher, isbn, indexpattern_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, e.TctID, e.Title, e.Author, e.Publisher, e.Isbn, e.IndexpatternID)
	_, err = db.Exec(sqlstr, e.TctID, e.Title, e.Author, e.Publisher, e.Isbn, e.IndexpatternID)
	if err != nil {
		return err
	}

	// set existence
	e._exists = true

	return nil
}

// Update updates the Epub in the database.
func (e *Epub) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE enm.epubs SET ` +
		`title = ?, author = ?, publisher = ?, isbn = ?, indexpattern_id = ?` +
		` WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, e.Title, e.Author, e.Publisher, e.Isbn, e.IndexpatternID, e.TctID)
	_, err = db.Exec(sqlstr, e.Title, e.Author, e.Publisher, e.Isbn, e.IndexpatternID, e.TctID)
	return err
}

// Save saves the Epub to the database.
func (e *Epub) Save(db XODB) error {
	if e.Exists() {
		return e.Update(db)
	}

	return e.Insert(db)
}

// Delete deletes the Epub from the database.
func (e *Epub) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM enm.epubs WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, e.TctID)
	_, err = db.Exec(sqlstr, e.TctID)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// Indexpattern returns the Indexpattern associated with the Epub's IndexpatternID (indexpattern_id).
//
// Generated from foreign key 'fk__epubs__indexpatterns'.
func (e *Epub) Indexpattern(db XODB) (*Indexpattern, error) {
	return IndexpatternByTctID(db, e.IndexpatternID)
}

// EpubByTctID retrieves a row from 'enm.epubs' as a Epub.
//
// Generated from index 'epubs_tct_id_pkey'.
func EpubByTctID(db XODB, tctID int) (*Epub, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, title, author, publisher, isbn, indexpattern_id ` +
		`FROM enm.epubs ` +
		`WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, tctID)
	e := Epub{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tctID).Scan(&e.TctID, &e.Title, &e.Author, &e.Publisher, &e.Isbn, &e.IndexpatternID)
	if err != nil {
		return nil, err
	}

	return &e, nil
}

// EpubsByIndexpatternID retrieves a row from 'enm.epubs' as a Epub.
//
// Generated from index 'indexpattern_id'.
func EpubsByIndexpatternID(db XODB, indexpatternID int) ([]*Epub, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, title, author, publisher, isbn, indexpattern_id ` +
		`FROM enm.epubs ` +
		`WHERE indexpattern_id = ?`

	// run query
	XOLog(sqlstr, indexpatternID)
	q, err := db.Query(sqlstr, indexpatternID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Epub{}
	for q.Next() {
		e := Epub{
			_exists: true,
		}

		// scan
		err = q.Scan(&e.TctID, &e.Title, &e.Author, &e.Publisher, &e.Isbn, &e.IndexpatternID)
		if err != nil {
			return nil, err
		}

		res = append(res, &e)
	}

	return res, nil
}

// EpubByIsbn retrieves a row from 'enm.epubs' as a Epub.
//
// Generated from index 'isbn'.
func EpubByIsbn(db XODB, isbn sql.NullString) (*Epub, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, title, author, publisher, isbn, indexpattern_id ` +
		`FROM enm.epubs ` +
		`WHERE isbn = ?`

	// run query
	XOLog(sqlstr, isbn)
	e := Epub{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, isbn).Scan(&e.TctID, &e.Title, &e.Author, &e.Publisher, &e.Isbn, &e.IndexpatternID)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
