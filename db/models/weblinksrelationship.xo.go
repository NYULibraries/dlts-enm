// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// WeblinksRelationship represents a row from 'enm.weblinks_relationship'.
type WeblinksRelationship struct {
	ID           int    `json:"id"`           // id
	Relationship string `json:"relationship"` // relationship

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WeblinksRelationship exists in the database.
func (wr *WeblinksRelationship) Exists() bool {
	return wr._exists
}

// Deleted provides information if the WeblinksRelationship has been deleted from the database.
func (wr *WeblinksRelationship) Deleted() bool {
	return wr._deleted
}

// Insert inserts the WeblinksRelationship to the database.
func (wr *WeblinksRelationship) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO enm.weblinks_relationship (` +
		`id, relationship` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, wr.ID, wr.Relationship)
	_, err = db.Exec(sqlstr, wr.ID, wr.Relationship)
	if err != nil {
		return err
	}

	// set existence
	wr._exists = true

	return nil
}

// Update updates the WeblinksRelationship in the database.
func (wr *WeblinksRelationship) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE enm.weblinks_relationship SET ` +
		`relationship = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wr.Relationship, wr.ID)
	_, err = db.Exec(sqlstr, wr.Relationship, wr.ID)
	return err
}

// Save saves the WeblinksRelationship to the database.
func (wr *WeblinksRelationship) Save(db XODB) error {
	if wr.Exists() {
		return wr.Update(db)
	}

	return wr.Insert(db)
}

// Delete deletes the WeblinksRelationship from the database.
func (wr *WeblinksRelationship) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wr._exists {
		return nil
	}

	// if deleted, bail
	if wr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM enm.weblinks_relationship WHERE id = ?`

	// run query
	XOLog(sqlstr, wr.ID)
	_, err = db.Exec(sqlstr, wr.ID)
	if err != nil {
		return err
	}

	// set deleted
	wr._deleted = true

	return nil
}

// WeblinksRelationshipByID retrieves a row from 'enm.weblinks_relationship' as a WeblinksRelationship.
//
// Generated from index 'weblinks_relationship_id_pkey'.
func WeblinksRelationshipByID(db XODB, id int) (*WeblinksRelationship, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, relationship ` +
		`FROM enm.weblinks_relationship ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wr := WeblinksRelationship{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wr.ID, &wr.Relationship)
	if err != nil {
		return nil, err
	}

	return &wr, nil
}
