// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// LexRecognizer represents a row from 'public.lex_recognizer'.
type LexRecognizer struct {
	ID          int     `json:"id"`          // id
	Description string  `json:"description"` // description
	Recognizer  string  `json:"recognizer"`  // recognizer
	Replacer    string  `json:"replacer"`    // replacer
	Passthrough bool    `json:"passthrough"` // passthrough
	Priority    float64 `json:"priority"`    // priority

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LexRecognizer exists in the database.
func (lr *LexRecognizer) Exists() bool {
	return lr._exists
}

// Deleted provides information if the LexRecognizer has been deleted from the database.
func (lr *LexRecognizer) Deleted() bool {
	return lr._deleted
}

// Insert inserts the LexRecognizer to the database.
func (lr *LexRecognizer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if lr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.lex_recognizer (` +
		`description, recognizer, replacer, passthrough, priority` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, lr.Description, lr.Recognizer, lr.Replacer, lr.Passthrough, lr.Priority)
	err = db.QueryRow(sqlstr, lr.Description, lr.Recognizer, lr.Replacer, lr.Passthrough, lr.Priority).Scan(&lr.ID)
	if err != nil {
		return err
	}

	// set existence
	lr._exists = true

	return nil
}

// Update updates the LexRecognizer in the database.
func (lr *LexRecognizer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !lr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if lr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.lex_recognizer SET (` +
		`description, recognizer, replacer, passthrough, priority` +
		`) = ( ` +
		`$1, $2, $3, $4, $5` +
		`) WHERE id = $6`

	// run query
	XOLog(sqlstr, lr.Description, lr.Recognizer, lr.Replacer, lr.Passthrough, lr.Priority, lr.ID)
	_, err = db.Exec(sqlstr, lr.Description, lr.Recognizer, lr.Replacer, lr.Passthrough, lr.Priority, lr.ID)
	return err
}

// Save saves the LexRecognizer to the database.
func (lr *LexRecognizer) Save(db XODB) error {
	if lr.Exists() {
		return lr.Update(db)
	}

	return lr.Insert(db)
}

// Upsert performs an upsert for LexRecognizer.
//
// NOTE: PostgreSQL 9.5+ only
func (lr *LexRecognizer) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if lr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.lex_recognizer (` +
		`id, description, recognizer, replacer, passthrough, priority` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, description, recognizer, replacer, passthrough, priority` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.description, EXCLUDED.recognizer, EXCLUDED.replacer, EXCLUDED.passthrough, EXCLUDED.priority` +
		`)`

	// run query
	XOLog(sqlstr, lr.ID, lr.Description, lr.Recognizer, lr.Replacer, lr.Passthrough, lr.Priority)
	_, err = db.Exec(sqlstr, lr.ID, lr.Description, lr.Recognizer, lr.Replacer, lr.Passthrough, lr.Priority)
	if err != nil {
		return err
	}

	// set existence
	lr._exists = true

	return nil
}

// Delete deletes the LexRecognizer from the database.
func (lr *LexRecognizer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !lr._exists {
		return nil
	}

	// if deleted, bail
	if lr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.lex_recognizer WHERE id = $1`

	// run query
	XOLog(sqlstr, lr.ID)
	_, err = db.Exec(sqlstr, lr.ID)
	if err != nil {
		return err
	}

	// set deleted
	lr._deleted = true

	return nil
}

// LexRecognizersByReplacer retrieves a row from 'public.lex_recognizer' as a LexRecognizer.
//
// Generated from index 'lex_recognizer_810b48a6'.
func LexRecognizersByReplacer(db XODB, replacer string) ([]*LexRecognizer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, description, recognizer, replacer, passthrough, priority ` +
		`FROM public.lex_recognizer ` +
		`WHERE replacer = $1`

	// run query
	XOLog(sqlstr, replacer)
	q, err := db.Query(sqlstr, replacer)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*LexRecognizer{}
	for q.Next() {
		lr := LexRecognizer{
			_exists: true,
		}

		// scan
		err = q.Scan(&lr.ID, &lr.Description, &lr.Recognizer, &lr.Replacer, &lr.Passthrough, &lr.Priority)
		if err != nil {
			return nil, err
		}

		res = append(res, &lr)
	}

	return res, nil
}

// LexRecognizerByID retrieves a row from 'public.lex_recognizer' as a LexRecognizer.
//
// Generated from index 'lex_recognizer_pkey'.
func LexRecognizerByID(db XODB, id int) (*LexRecognizer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, description, recognizer, replacer, passthrough, priority ` +
		`FROM public.lex_recognizer ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	lr := LexRecognizer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&lr.ID, &lr.Description, &lr.Recognizer, &lr.Replacer, &lr.Passthrough, &lr.Priority)
	if err != nil {
		return nil, err
	}

	return &lr, nil
}

// LexRecognizersByReplacer retrieves a row from 'public.lex_recognizer' as a LexRecognizer.
//
// Generated from index 'lex_recognizer_replacer_0ef1a2a2_like'.
func LexRecognizersByReplacer(db XODB, replacer string) ([]*LexRecognizer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, description, recognizer, replacer, passthrough, priority ` +
		`FROM public.lex_recognizer ` +
		`WHERE replacer = $1`

	// run query
	XOLog(sqlstr, replacer)
	q, err := db.Query(sqlstr, replacer)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*LexRecognizer{}
	for q.Next() {
		lr := LexRecognizer{
			_exists: true,
		}

		// scan
		err = q.Scan(&lr.ID, &lr.Description, &lr.Recognizer, &lr.Replacer, &lr.Passthrough, &lr.Priority)
		if err != nil {
			return nil, err
		}

		res = append(res, &lr)
	}

	return res, nil
}
