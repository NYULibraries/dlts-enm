// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Topic represents a row from 'enm.topics'.
type Topic struct {
	TctID                         int            `json:"tct_id"`                           // tct_id
	DisplayNameDoNotUse           string         `json:"display_name_do_not_use"`          // display_name_do_not_use
	EditorialReviewStatusReviewer sql.NullString `json:"editorial_review_status_reviewer"` // editorial_review_status_reviewer
	EditorialReviewStatusTime     sql.NullString `json:"editorial_review_status_time"`     // editorial_review_status_time
	EditorialReviewStatusStatus   int            `json:"editorial_review_status_status"`   // editorial_review_status_status

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Topic exists in the database.
func (t *Topic) Exists() bool {
	return t._exists
}

// Deleted provides information if the Topic has been deleted from the database.
func (t *Topic) Deleted() bool {
	return t._deleted
}

// Insert inserts the Topic to the database.
func (t *Topic) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if t._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO enm.topics (` +
		`tct_id, display_name_do_not_use, editorial_review_status_reviewer, editorial_review_status_time, editorial_review_status_status` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, t.TctID, t.DisplayNameDoNotUse, t.EditorialReviewStatusReviewer, t.EditorialReviewStatusTime, t.EditorialReviewStatusStatus)
	_, err = db.Exec(sqlstr, t.TctID, t.DisplayNameDoNotUse, t.EditorialReviewStatusReviewer, t.EditorialReviewStatusTime, t.EditorialReviewStatusStatus)
	if err != nil {
		return err
	}

	// set existence
	t._exists = true

	return nil
}

// Update updates the Topic in the database.
func (t *Topic) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if t._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE enm.topics SET ` +
		`display_name_do_not_use = ?, editorial_review_status_reviewer = ?, editorial_review_status_time = ?, editorial_review_status_status = ?` +
		` WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, t.DisplayNameDoNotUse, t.EditorialReviewStatusReviewer, t.EditorialReviewStatusTime, t.EditorialReviewStatusStatus, t.TctID)
	_, err = db.Exec(sqlstr, t.DisplayNameDoNotUse, t.EditorialReviewStatusReviewer, t.EditorialReviewStatusTime, t.EditorialReviewStatusStatus, t.TctID)
	return err
}

// Save saves the Topic to the database.
func (t *Topic) Save(db XODB) error {
	if t.Exists() {
		return t.Update(db)
	}

	return t.Insert(db)
}

// Delete deletes the Topic from the database.
func (t *Topic) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !t._exists {
		return nil
	}

	// if deleted, bail
	if t._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM enm.topics WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, t.TctID)
	_, err = db.Exec(sqlstr, t.TctID)
	if err != nil {
		return err
	}

	// set deleted
	t._deleted = true

	return nil
}

// EditorialReviewStatusStatus returns the EditorialReviewStatusStatus associated with the Topic's EditorialReviewStatusStatus (editorial_review_status_status).
//
// Generated from foreign key 'fk__topics__editorial_review_status_statuses'.
func (t *Topic) EditorialReviewStatusStatus(db XODB) (*EditorialReviewStatusStatus, error) {
	return EditorialReviewStatusStatusByID(db, t.EditorialReviewStatusStatus)
}

// TopicsByEditorialReviewStatusStatus retrieves a row from 'enm.topics' as a Topic.
//
// Generated from index 'editorial_review_status_status'.
func TopicsByEditorialReviewStatusStatus(db XODB, editorialReviewStatusStatus int) ([]*Topic, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, display_name_do_not_use, editorial_review_status_reviewer, editorial_review_status_time, editorial_review_status_status ` +
		`FROM enm.topics ` +
		`WHERE editorial_review_status_status = ?`

	// run query
	XOLog(sqlstr, editorialReviewStatusStatus)
	q, err := db.Query(sqlstr, editorialReviewStatusStatus)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Topic{}
	for q.Next() {
		t := Topic{
			_exists: true,
		}

		// scan
		err = q.Scan(&t.TctID, &t.DisplayNameDoNotUse, &t.EditorialReviewStatusReviewer, &t.EditorialReviewStatusTime, &t.EditorialReviewStatusStatus)
		if err != nil {
			return nil, err
		}

		res = append(res, &t)
	}

	return res, nil
}

// TopicByTctID retrieves a row from 'enm.topics' as a Topic.
//
// Generated from index 'topics_tct_id_pkey'.
func TopicByTctID(db XODB, tctID int) (*Topic, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, display_name_do_not_use, editorial_review_status_reviewer, editorial_review_status_time, editorial_review_status_status ` +
		`FROM enm.topics ` +
		`WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, tctID)
	t := Topic{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tctID).Scan(&t.TctID, &t.DisplayNameDoNotUse, &t.EditorialReviewStatusReviewer, &t.EditorialReviewStatusTime, &t.EditorialReviewStatusStatus)
	if err != nil {
		return nil, err
	}

	return &t, nil
}
