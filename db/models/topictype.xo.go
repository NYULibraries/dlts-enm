// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// TopicType represents a row from 'enm.topic_types'.
type TopicType struct {
	TctID int    `json:"tct_id"` // tct_id
	Ttype string `json:"ttype"`  // ttype

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TopicType exists in the database.
func (tt *TopicType) Exists() bool {
	return tt._exists
}

// Deleted provides information if the TopicType has been deleted from the database.
func (tt *TopicType) Deleted() bool {
	return tt._deleted
}

// Insert inserts the TopicType to the database.
func (tt *TopicType) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO enm.topic_types (` +
		`tct_id, ttype` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tt.TctID, tt.Ttype)
	_, err = db.Exec(sqlstr, tt.TctID, tt.Ttype)
	if err != nil {
		return err
	}

	// set existence
	tt._exists = true

	return nil
}

// Update updates the TopicType in the database.
func (tt *TopicType) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE enm.topic_types SET ` +
		`ttype = ?` +
		` WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, tt.Ttype, tt.TctID)
	_, err = db.Exec(sqlstr, tt.Ttype, tt.TctID)
	return err
}

// Save saves the TopicType to the database.
func (tt *TopicType) Save(db XODB) error {
	if tt.Exists() {
		return tt.Update(db)
	}

	return tt.Insert(db)
}

// Delete deletes the TopicType from the database.
func (tt *TopicType) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tt._exists {
		return nil
	}

	// if deleted, bail
	if tt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM enm.topic_types WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, tt.TctID)
	_, err = db.Exec(sqlstr, tt.TctID)
	if err != nil {
		return err
	}

	// set deleted
	tt._deleted = true

	return nil
}

// TopicTypeByTctID retrieves a row from 'enm.topic_types' as a TopicType.
//
// Generated from index 'topic_types_tct_id_pkey'.
func TopicTypeByTctID(db XODB, tctID int) (*TopicType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, ttype ` +
		`FROM enm.topic_types ` +
		`WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, tctID)
	tt := TopicType{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tctID).Scan(&tt.TctID, &tt.Ttype)
	if err != nil {
		return nil, err
	}

	return &tt, nil
}
