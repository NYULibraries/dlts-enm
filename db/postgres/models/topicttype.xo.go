// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// TopicTtype represents a row from 'public.topic_ttype'.
type TopicTtype struct {
	ID    int    `json:"id"`    // id
	Ttype string `json:"ttype"` // ttype

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TopicTtype exists in the database.
func (tt *TopicTtype) Exists() bool {
	return tt._exists
}

// Deleted provides information if the TopicTtype has been deleted from the database.
func (tt *TopicTtype) Deleted() bool {
	return tt._deleted
}

// Insert inserts the TopicTtype to the database.
func (tt *TopicTtype) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.topic_ttype (` +
		`ttype` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, tt.Ttype)
	err = db.QueryRow(sqlstr, tt.Ttype).Scan(&tt.ID)
	if err != nil {
		return err
	}

	// set existence
	tt._exists = true

	return nil
}

// Update updates the TopicTtype in the database.
func (tt *TopicTtype) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.topic_ttype SET (` +
		`ttype` +
		`) = ( ` +
		`$1` +
		`) WHERE id = $2`

	// run query
	XOLog(sqlstr, tt.Ttype, tt.ID)
	_, err = db.Exec(sqlstr, tt.Ttype, tt.ID)
	return err
}

// Save saves the TopicTtype to the database.
func (tt *TopicTtype) Save(db XODB) error {
	if tt.Exists() {
		return tt.Update(db)
	}

	return tt.Insert(db)
}

// Upsert performs an upsert for TopicTtype.
//
// NOTE: PostgreSQL 9.5+ only
func (tt *TopicTtype) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if tt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.topic_ttype (` +
		`id, ttype` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, ttype` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.ttype` +
		`)`

	// run query
	XOLog(sqlstr, tt.ID, tt.Ttype)
	_, err = db.Exec(sqlstr, tt.ID, tt.Ttype)
	if err != nil {
		return err
	}

	// set existence
	tt._exists = true

	return nil
}

// Delete deletes the TopicTtype from the database.
func (tt *TopicTtype) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tt._exists {
		return nil
	}

	// if deleted, bail
	if tt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.topic_ttype WHERE id = $1`

	// run query
	XOLog(sqlstr, tt.ID)
	_, err = db.Exec(sqlstr, tt.ID)
	if err != nil {
		return err
	}

	// set deleted
	tt._deleted = true

	return nil
}

// TopicTtypeByID retrieves a row from 'public.topic_ttype' as a TopicTtype.
//
// Generated from index 'topic_ttype_pkey'.
func TopicTtypeByID(db XODB, id int) (*TopicTtype, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ttype ` +
		`FROM public.topic_ttype ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	tt := TopicTtype{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&tt.ID, &tt.Ttype)
	if err != nil {
		return nil, err
	}

	return &tt, nil
}

// TopicTtypesByTtype retrieves a row from 'public.topic_ttype' as a TopicTtype.
//
// Generated from index 'topic_ttype_ttype_b18271cf_like'.
func TopicTtypesByTtype(db XODB, ttype string) ([]*TopicTtype, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ttype ` +
		`FROM public.topic_ttype ` +
		`WHERE ttype = $1`

	// run query
	XOLog(sqlstr, ttype)
	q, err := db.Query(sqlstr, ttype)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TopicTtype{}
	for q.Next() {
		tt := TopicTtype{
			_exists: true,
		}

		// scan
		err = q.Scan(&tt.ID, &tt.Ttype)
		if err != nil {
			return nil, err
		}

		res = append(res, &tt)
	}

	return res, nil
}

// TopicTtypeByTtype retrieves a row from 'public.topic_ttype' as a TopicTtype.
//
// Generated from index 'topic_ttype_ttype_key'.
func TopicTtypeByTtype(db XODB, ttype string) (*TopicTtype, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, ttype ` +
		`FROM public.topic_ttype ` +
		`WHERE ttype = $1`

	// run query
	XOLog(sqlstr, ttype)
	tt := TopicTtype{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, ttype).Scan(&tt.ID, &tt.Ttype)
	if err != nil {
		return nil, err
	}

	return &tt, nil
}
