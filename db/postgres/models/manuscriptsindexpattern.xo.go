// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// ManuscriptsIndexpattern represents a row from 'public.manuscripts_indexpattern'.
type ManuscriptsIndexpattern struct {
	ID                                  int         `json:"id"`                                      // id
	Name                                string      `json:"name"`                                    // name
	Description                         string      `json:"description"`                             // description
	PagenumberPreStrings                StringSlice `json:"pagenumber_pre_strings"`                  // pagenumber_pre_strings
	XpathEntry                          string      `json:"xpath_entry"`                             // xpath_entry
	XpathSee                            string      `json:"xpath_see"`                               // xpath_see
	XpathSeealso                        string      `json:"xpath_seealso"`                           // xpath_seealso
	SeparatorBetweenEntryAndOccurrences string      `json:"separator_between_entry_and_occurrences"` // separator_between_entry_and_occurrences
	SeparatorBeforeFirstSubentry        string      `json:"separator_before_first_subentry"`         // separator_before_first_subentry
	SeparatorBetweenSubentries          string      `json:"separator_between_subentries"`            // separator_between_subentries
	SeparatorBetweenSees                string      `json:"separator_between_sees"`                  // separator_between_sees
	SeparatorBetweenSeealsos            string      `json:"separator_between_seealsos"`              // separator_between_seealsos
	XpathOccurrenceLink                 string      `json:"xpath_occurrence_link"`                   // xpath_occurrence_link
	SeparatorSeeSubentry                string      `json:"separator_see_subentry"`                  // separator_see_subentry
	SeeAlsoSplitStrings                 StringSlice `json:"see_also_split_strings"`                  // see_also_split_strings
	IndicatorsOfOccurrenceRange         StringSlice `json:"indicators_of_occurrence_range"`          // indicators_of_occurrence_range
	SeeSplitStrings                     StringSlice `json:"see_split_strings"`                       // see_split_strings
	InlineSeeAlsoEnd                    string      `json:"inline_see_also_end"`                     // inline_see_also_end
	InlineSeeAlsoStart                  string      `json:"inline_see_also_start"`                   // inline_see_also_start
	InlineSeeEnd                        string      `json:"inline_see_end"`                          // inline_see_end
	InlineSeeStart                      string      `json:"inline_see_start"`                        // inline_see_start
	SubentryClasses                     StringSlice `json:"subentry_classes"`                        // subentry_classes
	PagenumberCSSSelectorPattern        string      `json:"pagenumber_css_selector_pattern"`         // pagenumber_css_selector_pattern
	PagenumberTagPattern                string      `json:"pagenumber_tag_pattern"`                  // pagenumber_tag_pattern
	PagenumberXpathPattern              string      `json:"pagenumber_xpath_pattern"`                // pagenumber_xpath_pattern

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ManuscriptsIndexpattern exists in the database.
func (mi *ManuscriptsIndexpattern) Exists() bool {
	return mi._exists
}

// Deleted provides information if the ManuscriptsIndexpattern has been deleted from the database.
func (mi *ManuscriptsIndexpattern) Deleted() bool {
	return mi._deleted
}

// Insert inserts the ManuscriptsIndexpattern to the database.
func (mi *ManuscriptsIndexpattern) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.manuscripts_indexpattern (` +
		`name, description, pagenumber_pre_strings, xpath_entry, xpath_see, xpath_seealso, separator_between_entry_and_occurrences, separator_before_first_subentry, separator_between_subentries, separator_between_sees, separator_between_seealsos, xpath_occurrence_link, separator_see_subentry, see_also_split_strings, indicators_of_occurrence_range, see_split_strings, inline_see_also_end, inline_see_also_start, inline_see_end, inline_see_start, subentry_classes, pagenumber_css_selector_pattern, pagenumber_tag_pattern, pagenumber_xpath_pattern` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, mi.Name, mi.Description, mi.PagenumberPreStrings, mi.XpathEntry, mi.XpathSee, mi.XpathSeealso, mi.SeparatorBetweenEntryAndOccurrences, mi.SeparatorBeforeFirstSubentry, mi.SeparatorBetweenSubentries, mi.SeparatorBetweenSees, mi.SeparatorBetweenSeealsos, mi.XpathOccurrenceLink, mi.SeparatorSeeSubentry, mi.SeeAlsoSplitStrings, mi.IndicatorsOfOccurrenceRange, mi.SeeSplitStrings, mi.InlineSeeAlsoEnd, mi.InlineSeeAlsoStart, mi.InlineSeeEnd, mi.InlineSeeStart, mi.SubentryClasses, mi.PagenumberCSSSelectorPattern, mi.PagenumberTagPattern, mi.PagenumberXpathPattern)
	err = db.QueryRow(sqlstr, mi.Name, mi.Description, mi.PagenumberPreStrings, mi.XpathEntry, mi.XpathSee, mi.XpathSeealso, mi.SeparatorBetweenEntryAndOccurrences, mi.SeparatorBeforeFirstSubentry, mi.SeparatorBetweenSubentries, mi.SeparatorBetweenSees, mi.SeparatorBetweenSeealsos, mi.XpathOccurrenceLink, mi.SeparatorSeeSubentry, mi.SeeAlsoSplitStrings, mi.IndicatorsOfOccurrenceRange, mi.SeeSplitStrings, mi.InlineSeeAlsoEnd, mi.InlineSeeAlsoStart, mi.InlineSeeEnd, mi.InlineSeeStart, mi.SubentryClasses, mi.PagenumberCSSSelectorPattern, mi.PagenumberTagPattern, mi.PagenumberXpathPattern).Scan(&mi.ID)
	if err != nil {
		return err
	}

	// set existence
	mi._exists = true

	return nil
}

// Update updates the ManuscriptsIndexpattern in the database.
func (mi *ManuscriptsIndexpattern) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.manuscripts_indexpattern SET (` +
		`name, description, pagenumber_pre_strings, xpath_entry, xpath_see, xpath_seealso, separator_between_entry_and_occurrences, separator_before_first_subentry, separator_between_subentries, separator_between_sees, separator_between_seealsos, xpath_occurrence_link, separator_see_subentry, see_also_split_strings, indicators_of_occurrence_range, see_split_strings, inline_see_also_end, inline_see_also_start, inline_see_end, inline_see_start, subentry_classes, pagenumber_css_selector_pattern, pagenumber_tag_pattern, pagenumber_xpath_pattern` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24` +
		`) WHERE id = $25`

	// run query
	XOLog(sqlstr, mi.Name, mi.Description, mi.PagenumberPreStrings, mi.XpathEntry, mi.XpathSee, mi.XpathSeealso, mi.SeparatorBetweenEntryAndOccurrences, mi.SeparatorBeforeFirstSubentry, mi.SeparatorBetweenSubentries, mi.SeparatorBetweenSees, mi.SeparatorBetweenSeealsos, mi.XpathOccurrenceLink, mi.SeparatorSeeSubentry, mi.SeeAlsoSplitStrings, mi.IndicatorsOfOccurrenceRange, mi.SeeSplitStrings, mi.InlineSeeAlsoEnd, mi.InlineSeeAlsoStart, mi.InlineSeeEnd, mi.InlineSeeStart, mi.SubentryClasses, mi.PagenumberCSSSelectorPattern, mi.PagenumberTagPattern, mi.PagenumberXpathPattern, mi.ID)
	_, err = db.Exec(sqlstr, mi.Name, mi.Description, mi.PagenumberPreStrings, mi.XpathEntry, mi.XpathSee, mi.XpathSeealso, mi.SeparatorBetweenEntryAndOccurrences, mi.SeparatorBeforeFirstSubentry, mi.SeparatorBetweenSubentries, mi.SeparatorBetweenSees, mi.SeparatorBetweenSeealsos, mi.XpathOccurrenceLink, mi.SeparatorSeeSubentry, mi.SeeAlsoSplitStrings, mi.IndicatorsOfOccurrenceRange, mi.SeeSplitStrings, mi.InlineSeeAlsoEnd, mi.InlineSeeAlsoStart, mi.InlineSeeEnd, mi.InlineSeeStart, mi.SubentryClasses, mi.PagenumberCSSSelectorPattern, mi.PagenumberTagPattern, mi.PagenumberXpathPattern, mi.ID)
	return err
}

// Save saves the ManuscriptsIndexpattern to the database.
func (mi *ManuscriptsIndexpattern) Save(db XODB) error {
	if mi.Exists() {
		return mi.Update(db)
	}

	return mi.Insert(db)
}

// Upsert performs an upsert for ManuscriptsIndexpattern.
//
// NOTE: PostgreSQL 9.5+ only
func (mi *ManuscriptsIndexpattern) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if mi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.manuscripts_indexpattern (` +
		`id, name, description, pagenumber_pre_strings, xpath_entry, xpath_see, xpath_seealso, separator_between_entry_and_occurrences, separator_before_first_subentry, separator_between_subentries, separator_between_sees, separator_between_seealsos, xpath_occurrence_link, separator_see_subentry, see_also_split_strings, indicators_of_occurrence_range, see_split_strings, inline_see_also_end, inline_see_also_start, inline_see_end, inline_see_start, subentry_classes, pagenumber_css_selector_pattern, pagenumber_tag_pattern, pagenumber_xpath_pattern` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, description, pagenumber_pre_strings, xpath_entry, xpath_see, xpath_seealso, separator_between_entry_and_occurrences, separator_before_first_subentry, separator_between_subentries, separator_between_sees, separator_between_seealsos, xpath_occurrence_link, separator_see_subentry, see_also_split_strings, indicators_of_occurrence_range, see_split_strings, inline_see_also_end, inline_see_also_start, inline_see_end, inline_see_start, subentry_classes, pagenumber_css_selector_pattern, pagenumber_tag_pattern, pagenumber_xpath_pattern` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.description, EXCLUDED.pagenumber_pre_strings, EXCLUDED.xpath_entry, EXCLUDED.xpath_see, EXCLUDED.xpath_seealso, EXCLUDED.separator_between_entry_and_occurrences, EXCLUDED.separator_before_first_subentry, EXCLUDED.separator_between_subentries, EXCLUDED.separator_between_sees, EXCLUDED.separator_between_seealsos, EXCLUDED.xpath_occurrence_link, EXCLUDED.separator_see_subentry, EXCLUDED.see_also_split_strings, EXCLUDED.indicators_of_occurrence_range, EXCLUDED.see_split_strings, EXCLUDED.inline_see_also_end, EXCLUDED.inline_see_also_start, EXCLUDED.inline_see_end, EXCLUDED.inline_see_start, EXCLUDED.subentry_classes, EXCLUDED.pagenumber_css_selector_pattern, EXCLUDED.pagenumber_tag_pattern, EXCLUDED.pagenumber_xpath_pattern` +
		`)`

	// run query
	XOLog(sqlstr, mi.ID, mi.Name, mi.Description, mi.PagenumberPreStrings, mi.XpathEntry, mi.XpathSee, mi.XpathSeealso, mi.SeparatorBetweenEntryAndOccurrences, mi.SeparatorBeforeFirstSubentry, mi.SeparatorBetweenSubentries, mi.SeparatorBetweenSees, mi.SeparatorBetweenSeealsos, mi.XpathOccurrenceLink, mi.SeparatorSeeSubentry, mi.SeeAlsoSplitStrings, mi.IndicatorsOfOccurrenceRange, mi.SeeSplitStrings, mi.InlineSeeAlsoEnd, mi.InlineSeeAlsoStart, mi.InlineSeeEnd, mi.InlineSeeStart, mi.SubentryClasses, mi.PagenumberCSSSelectorPattern, mi.PagenumberTagPattern, mi.PagenumberXpathPattern)
	_, err = db.Exec(sqlstr, mi.ID, mi.Name, mi.Description, mi.PagenumberPreStrings, mi.XpathEntry, mi.XpathSee, mi.XpathSeealso, mi.SeparatorBetweenEntryAndOccurrences, mi.SeparatorBeforeFirstSubentry, mi.SeparatorBetweenSubentries, mi.SeparatorBetweenSees, mi.SeparatorBetweenSeealsos, mi.XpathOccurrenceLink, mi.SeparatorSeeSubentry, mi.SeeAlsoSplitStrings, mi.IndicatorsOfOccurrenceRange, mi.SeeSplitStrings, mi.InlineSeeAlsoEnd, mi.InlineSeeAlsoStart, mi.InlineSeeEnd, mi.InlineSeeStart, mi.SubentryClasses, mi.PagenumberCSSSelectorPattern, mi.PagenumberTagPattern, mi.PagenumberXpathPattern)
	if err != nil {
		return err
	}

	// set existence
	mi._exists = true

	return nil
}

// Delete deletes the ManuscriptsIndexpattern from the database.
func (mi *ManuscriptsIndexpattern) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mi._exists {
		return nil
	}

	// if deleted, bail
	if mi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.manuscripts_indexpattern WHERE id = $1`

	// run query
	XOLog(sqlstr, mi.ID)
	_, err = db.Exec(sqlstr, mi.ID)
	if err != nil {
		return err
	}

	// set deleted
	mi._deleted = true

	return nil
}

// ManuscriptsIndexpatternsByName retrieves a row from 'public.manuscripts_indexpattern' as a ManuscriptsIndexpattern.
//
// Generated from index 'manuscripts_indexpattern_name_f4a44544_like'.
func ManuscriptsIndexpatternsByName(db XODB, name string) ([]*ManuscriptsIndexpattern, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, description, pagenumber_pre_strings, xpath_entry, xpath_see, xpath_seealso, separator_between_entry_and_occurrences, separator_before_first_subentry, separator_between_subentries, separator_between_sees, separator_between_seealsos, xpath_occurrence_link, separator_see_subentry, see_also_split_strings, indicators_of_occurrence_range, see_split_strings, inline_see_also_end, inline_see_also_start, inline_see_end, inline_see_start, subentry_classes, pagenumber_css_selector_pattern, pagenumber_tag_pattern, pagenumber_xpath_pattern ` +
		`FROM public.manuscripts_indexpattern ` +
		`WHERE name = $1`

	// run query
	XOLog(sqlstr, name)
	q, err := db.Query(sqlstr, name)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ManuscriptsIndexpattern{}
	for q.Next() {
		mi := ManuscriptsIndexpattern{
			_exists: true,
		}

		// scan
		err = q.Scan(&mi.ID, &mi.Name, &mi.Description, &mi.PagenumberPreStrings, &mi.XpathEntry, &mi.XpathSee, &mi.XpathSeealso, &mi.SeparatorBetweenEntryAndOccurrences, &mi.SeparatorBeforeFirstSubentry, &mi.SeparatorBetweenSubentries, &mi.SeparatorBetweenSees, &mi.SeparatorBetweenSeealsos, &mi.XpathOccurrenceLink, &mi.SeparatorSeeSubentry, &mi.SeeAlsoSplitStrings, &mi.IndicatorsOfOccurrenceRange, &mi.SeeSplitStrings, &mi.InlineSeeAlsoEnd, &mi.InlineSeeAlsoStart, &mi.InlineSeeEnd, &mi.InlineSeeStart, &mi.SubentryClasses, &mi.PagenumberCSSSelectorPattern, &mi.PagenumberTagPattern, &mi.PagenumberXpathPattern)
		if err != nil {
			return nil, err
		}

		res = append(res, &mi)
	}

	return res, nil
}

// ManuscriptsIndexpatternByName retrieves a row from 'public.manuscripts_indexpattern' as a ManuscriptsIndexpattern.
//
// Generated from index 'manuscripts_indexpattern_name_key'.
func ManuscriptsIndexpatternByName(db XODB, name string) (*ManuscriptsIndexpattern, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, description, pagenumber_pre_strings, xpath_entry, xpath_see, xpath_seealso, separator_between_entry_and_occurrences, separator_before_first_subentry, separator_between_subentries, separator_between_sees, separator_between_seealsos, xpath_occurrence_link, separator_see_subentry, see_also_split_strings, indicators_of_occurrence_range, see_split_strings, inline_see_also_end, inline_see_also_start, inline_see_end, inline_see_start, subentry_classes, pagenumber_css_selector_pattern, pagenumber_tag_pattern, pagenumber_xpath_pattern ` +
		`FROM public.manuscripts_indexpattern ` +
		`WHERE name = $1`

	// run query
	XOLog(sqlstr, name)
	mi := ManuscriptsIndexpattern{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&mi.ID, &mi.Name, &mi.Description, &mi.PagenumberPreStrings, &mi.XpathEntry, &mi.XpathSee, &mi.XpathSeealso, &mi.SeparatorBetweenEntryAndOccurrences, &mi.SeparatorBeforeFirstSubentry, &mi.SeparatorBetweenSubentries, &mi.SeparatorBetweenSees, &mi.SeparatorBetweenSeealsos, &mi.XpathOccurrenceLink, &mi.SeparatorSeeSubentry, &mi.SeeAlsoSplitStrings, &mi.IndicatorsOfOccurrenceRange, &mi.SeeSplitStrings, &mi.InlineSeeAlsoEnd, &mi.InlineSeeAlsoStart, &mi.InlineSeeEnd, &mi.InlineSeeStart, &mi.SubentryClasses, &mi.PagenumberCSSSelectorPattern, &mi.PagenumberTagPattern, &mi.PagenumberXpathPattern)
	if err != nil {
		return nil, err
	}

	return &mi, nil
}

// ManuscriptsIndexpatternByID retrieves a row from 'public.manuscripts_indexpattern' as a ManuscriptsIndexpattern.
//
// Generated from index 'manuscripts_indexpattern_pkey'.
func ManuscriptsIndexpatternByID(db XODB, id int) (*ManuscriptsIndexpattern, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, description, pagenumber_pre_strings, xpath_entry, xpath_see, xpath_seealso, separator_between_entry_and_occurrences, separator_before_first_subentry, separator_between_subentries, separator_between_sees, separator_between_seealsos, xpath_occurrence_link, separator_see_subentry, see_also_split_strings, indicators_of_occurrence_range, see_split_strings, inline_see_also_end, inline_see_also_start, inline_see_end, inline_see_start, subentry_classes, pagenumber_css_selector_pattern, pagenumber_tag_pattern, pagenumber_xpath_pattern ` +
		`FROM public.manuscripts_indexpattern ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	mi := ManuscriptsIndexpattern{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mi.ID, &mi.Name, &mi.Description, &mi.PagenumberPreStrings, &mi.XpathEntry, &mi.XpathSee, &mi.XpathSeealso, &mi.SeparatorBetweenEntryAndOccurrences, &mi.SeparatorBeforeFirstSubentry, &mi.SeparatorBetweenSubentries, &mi.SeparatorBetweenSees, &mi.SeparatorBetweenSeealsos, &mi.XpathOccurrenceLink, &mi.SeparatorSeeSubentry, &mi.SeeAlsoSplitStrings, &mi.IndicatorsOfOccurrenceRange, &mi.SeeSplitStrings, &mi.InlineSeeAlsoEnd, &mi.InlineSeeAlsoStart, &mi.InlineSeeEnd, &mi.InlineSeeStart, &mi.SubentryClasses, &mi.PagenumberCSSSelectorPattern, &mi.PagenumberTagPattern, &mi.PagenumberXpathPattern)
	if err != nil {
		return nil, err
	}

	return &mi, nil
}
