// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

// Page represents a row from '[custom page]'.
type Page struct {
	ID           int    // id
	Title        string // title
	Authors      string // authors
	Publisher    string // publisher
	Isbn         string // isbn
	PageLocalid  string // page_localid
	PageSequence int    // page_sequence
	PageText     string // page_text
}

// GetPages runs a custom query, returning results as Page.
func GetPages(db XODB) ([]*Page, error) {
	var err error

	// sql query
	const sqlstr = `SELECT DISTINCT ` +
		`ol.id, ` +
		`od.title, ` +
		`od.author AS authors, ` +
		`oee.publisher, ` +
		`LEFT(RIGHT(oee.source, 18), 13) AS isbn, ` +
		`ol.localid AS page_localid, ` +
		`ol.sequence_number AS page_sequence, ` +
		`oc.text AS page_text ` +
		` ` +
		`FROM occurrence_location ol ` +
		`INNER JOIN otx_epub_epub oee ON ol.document_id = oee.document_ptr_id ` +
		`INNER JOIN occurrence_document od ON od.id = oee.document_ptr_id ` +
		`INNER JOIN occurrence_content oc ON oc.id = ol.content_id ` +
		` ` +
		`ORDER BY ol.id`

	// run query
	XOLog(sqlstr)
	q, err := db.Query(sqlstr)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Page{}
	for q.Next() {
		p := Page{}

		// scan
		err = q.Scan(&p.ID, &p.Title, &p.Authors, &p.Publisher, &p.Isbn, &p.PageLocalid, &p.PageSequence, &p.PageText)
		if err != nil {
			return nil, err
		}

		res = append(res, &p)
	}

	return res, nil
}
