// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// Weblink represents a row from 'enm.weblinks'.
type Weblink struct {
	TctID                  int    `json:"tct_id"`                   // tct_id
	URL                    string `json:"url"`                      // url
	WeblinksRelationshipID int    `json:"weblinks_relationship_id"` // weblinks_relationship_id
	WeblinksVocabularyID   int    `json:"weblinks_vocabulary_id"`   // weblinks_vocabulary_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Weblink exists in the database.
func (w *Weblink) Exists() bool {
	return w._exists
}

// Deleted provides information if the Weblink has been deleted from the database.
func (w *Weblink) Deleted() bool {
	return w._deleted
}

// Insert inserts the Weblink to the database.
func (w *Weblink) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if w._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO enm.weblinks (` +
		`tct_id, url, weblinks_relationship_id, weblinks_vocabulary_id` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, w.TctID, w.URL, w.WeblinksRelationshipID, w.WeblinksVocabularyID)
	_, err = db.Exec(sqlstr, w.TctID, w.URL, w.WeblinksRelationshipID, w.WeblinksVocabularyID)
	if err != nil {
		return err
	}

	// set existence
	w._exists = true

	return nil
}

// Update updates the Weblink in the database.
func (w *Weblink) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !w._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if w._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE enm.weblinks SET ` +
		`url = ?, weblinks_relationship_id = ?, weblinks_vocabulary_id = ?` +
		` WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, w.URL, w.WeblinksRelationshipID, w.WeblinksVocabularyID, w.TctID)
	_, err = db.Exec(sqlstr, w.URL, w.WeblinksRelationshipID, w.WeblinksVocabularyID, w.TctID)
	return err
}

// Save saves the Weblink to the database.
func (w *Weblink) Save(db XODB) error {
	if w.Exists() {
		return w.Update(db)
	}

	return w.Insert(db)
}

// Delete deletes the Weblink from the database.
func (w *Weblink) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !w._exists {
		return nil
	}

	// if deleted, bail
	if w._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM enm.weblinks WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, w.TctID)
	_, err = db.Exec(sqlstr, w.TctID)
	if err != nil {
		return err
	}

	// set deleted
	w._deleted = true

	return nil
}

// WeblinksRelationship returns the WeblinksRelationship associated with the Weblink's WeblinksRelationshipID (weblinks_relationship_id).
//
// Generated from foreign key 'fk__weblinks__weblinks_relationship'.
func (w *Weblink) WeblinksRelationship(db XODB) (*WeblinksRelationship, error) {
	return WeblinksRelationshipByID(db, w.WeblinksRelationshipID)
}

// WeblinksVocabulary returns the WeblinksVocabulary associated with the Weblink's WeblinksVocabularyID (weblinks_vocabulary_id).
//
// Generated from foreign key 'fk__weblinks__weblinks_vocabulary'.
func (w *Weblink) WeblinksVocabulary(db XODB) (*WeblinksVocabulary, error) {
	return WeblinksVocabularyByID(db, w.WeblinksVocabularyID)
}

// WeblinksByWeblinksRelationshipID retrieves a row from 'enm.weblinks' as a Weblink.
//
// Generated from index 'weblinks_relationship_id'.
func WeblinksByWeblinksRelationshipID(db XODB, weblinksRelationshipID int) ([]*Weblink, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, url, weblinks_relationship_id, weblinks_vocabulary_id ` +
		`FROM enm.weblinks ` +
		`WHERE weblinks_relationship_id = ?`

	// run query
	XOLog(sqlstr, weblinksRelationshipID)
	q, err := db.Query(sqlstr, weblinksRelationshipID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Weblink{}
	for q.Next() {
		w := Weblink{
			_exists: true,
		}

		// scan
		err = q.Scan(&w.TctID, &w.URL, &w.WeblinksRelationshipID, &w.WeblinksVocabularyID)
		if err != nil {
			return nil, err
		}

		res = append(res, &w)
	}

	return res, nil
}

// WeblinkByTctID retrieves a row from 'enm.weblinks' as a Weblink.
//
// Generated from index 'weblinks_tct_id_pkey'.
func WeblinkByTctID(db XODB, tctID int) (*Weblink, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, url, weblinks_relationship_id, weblinks_vocabulary_id ` +
		`FROM enm.weblinks ` +
		`WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, tctID)
	w := Weblink{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tctID).Scan(&w.TctID, &w.URL, &w.WeblinksRelationshipID, &w.WeblinksVocabularyID)
	if err != nil {
		return nil, err
	}

	return &w, nil
}

// WeblinksByWeblinksVocabularyID retrieves a row from 'enm.weblinks' as a Weblink.
//
// Generated from index 'weblinks_vocabulary_id'.
func WeblinksByWeblinksVocabularyID(db XODB, weblinksVocabularyID int) ([]*Weblink, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, url, weblinks_relationship_id, weblinks_vocabulary_id ` +
		`FROM enm.weblinks ` +
		`WHERE weblinks_vocabulary_id = ?`

	// run query
	XOLog(sqlstr, weblinksVocabularyID)
	q, err := db.Query(sqlstr, weblinksVocabularyID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Weblink{}
	for q.Next() {
		w := Weblink{
			_exists: true,
		}

		// scan
		err = q.Scan(&w.TctID, &w.URL, &w.WeblinksRelationshipID, &w.WeblinksVocabularyID)
		if err != nil {
			return nil, err
		}

		res = append(res, &w)
	}

	return res, nil
}
