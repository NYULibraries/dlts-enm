// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// OccurrenceContent represents a row from 'public.occurrence_content'.
type OccurrenceContent struct {
	ID                     int            `json:"id"`                       // id
	ContentUniqueIndicator sql.NullString `json:"content_unique_indicator"` // content_unique_indicator
	ContentDescriptor      string         `json:"content_descriptor"`       // content_descriptor
	Text                   string         `json:"text"`                     // text

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OccurrenceContent exists in the database.
func (oc *OccurrenceContent) Exists() bool {
	return oc._exists
}

// Deleted provides information if the OccurrenceContent has been deleted from the database.
func (oc *OccurrenceContent) Deleted() bool {
	return oc._deleted
}

// Insert inserts the OccurrenceContent to the database.
func (oc *OccurrenceContent) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if oc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.occurrence_content (` +
		`content_unique_indicator, content_descriptor, text` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, oc.ContentUniqueIndicator, oc.ContentDescriptor, oc.Text)
	err = db.QueryRow(sqlstr, oc.ContentUniqueIndicator, oc.ContentDescriptor, oc.Text).Scan(&oc.ID)
	if err != nil {
		return err
	}

	// set existence
	oc._exists = true

	return nil
}

// Update updates the OccurrenceContent in the database.
func (oc *OccurrenceContent) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !oc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if oc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.occurrence_content SET (` +
		`content_unique_indicator, content_descriptor, text` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, oc.ContentUniqueIndicator, oc.ContentDescriptor, oc.Text, oc.ID)
	_, err = db.Exec(sqlstr, oc.ContentUniqueIndicator, oc.ContentDescriptor, oc.Text, oc.ID)
	return err
}

// Save saves the OccurrenceContent to the database.
func (oc *OccurrenceContent) Save(db XODB) error {
	if oc.Exists() {
		return oc.Update(db)
	}

	return oc.Insert(db)
}

// Upsert performs an upsert for OccurrenceContent.
//
// NOTE: PostgreSQL 9.5+ only
func (oc *OccurrenceContent) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if oc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.occurrence_content (` +
		`id, content_unique_indicator, content_descriptor, text` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, content_unique_indicator, content_descriptor, text` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.content_unique_indicator, EXCLUDED.content_descriptor, EXCLUDED.text` +
		`)`

	// run query
	XOLog(sqlstr, oc.ID, oc.ContentUniqueIndicator, oc.ContentDescriptor, oc.Text)
	_, err = db.Exec(sqlstr, oc.ID, oc.ContentUniqueIndicator, oc.ContentDescriptor, oc.Text)
	if err != nil {
		return err
	}

	// set existence
	oc._exists = true

	return nil
}

// Delete deletes the OccurrenceContent from the database.
func (oc *OccurrenceContent) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !oc._exists {
		return nil
	}

	// if deleted, bail
	if oc._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.occurrence_content WHERE id = $1`

	// run query
	XOLog(sqlstr, oc.ID)
	_, err = db.Exec(sqlstr, oc.ID)
	if err != nil {
		return err
	}

	// set deleted
	oc._deleted = true

	return nil
}

// OccurrenceContentsByContentUniqueIndicator retrieves a row from 'public.occurrence_content' as a OccurrenceContent.
//
// Generated from index 'occurrence_content_content_unique_indicator_f6c70273_like'.
func OccurrenceContentsByContentUniqueIndicator(db XODB, contentUniqueIndicator sql.NullString) ([]*OccurrenceContent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, content_unique_indicator, content_descriptor, text ` +
		`FROM public.occurrence_content ` +
		`WHERE content_unique_indicator = $1`

	// run query
	XOLog(sqlstr, contentUniqueIndicator)
	q, err := db.Query(sqlstr, contentUniqueIndicator)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*OccurrenceContent{}
	for q.Next() {
		oc := OccurrenceContent{
			_exists: true,
		}

		// scan
		err = q.Scan(&oc.ID, &oc.ContentUniqueIndicator, &oc.ContentDescriptor, &oc.Text)
		if err != nil {
			return nil, err
		}

		res = append(res, &oc)
	}

	return res, nil
}

// OccurrenceContentByContentUniqueIndicator retrieves a row from 'public.occurrence_content' as a OccurrenceContent.
//
// Generated from index 'occurrence_content_content_unique_indicator_key'.
func OccurrenceContentByContentUniqueIndicator(db XODB, contentUniqueIndicator sql.NullString) (*OccurrenceContent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, content_unique_indicator, content_descriptor, text ` +
		`FROM public.occurrence_content ` +
		`WHERE content_unique_indicator = $1`

	// run query
	XOLog(sqlstr, contentUniqueIndicator)
	oc := OccurrenceContent{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, contentUniqueIndicator).Scan(&oc.ID, &oc.ContentUniqueIndicator, &oc.ContentDescriptor, &oc.Text)
	if err != nil {
		return nil, err
	}

	return &oc, nil
}

// OccurrenceContentByID retrieves a row from 'public.occurrence_content' as a OccurrenceContent.
//
// Generated from index 'occurrence_content_pkey'.
func OccurrenceContentByID(db XODB, id int) (*OccurrenceContent, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, content_unique_indicator, content_descriptor, text ` +
		`FROM public.occurrence_content ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	oc := OccurrenceContent{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&oc.ID, &oc.ContentUniqueIndicator, &oc.ContentDescriptor, &oc.Text)
	if err != nil {
		return nil, err
	}

	return &oc, nil
}
