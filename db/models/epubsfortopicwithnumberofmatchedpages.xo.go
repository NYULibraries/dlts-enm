// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

// EpubsForTopicWithNumberOfMatchedPages represents a row from '[custom epubs_for_topic_with_number_of_matched_pages]'.
type EpubsForTopicWithNumberOfMatchedPages struct {
	Title               string // title
	Author              string // author
	Publisher           string // publisher
	Isbn                string // isbn
	NumberOfOccurrences int64  // number_of_occurrences
}

// EpubsForTopicWithNumberOfMatchedPagesByTopic_id runs a custom query, returning results as EpubsForTopicWithNumberOfMatchedPages.
func EpubsForTopicWithNumberOfMatchedPagesByTopic_id(db XODB, topic_id int) ([]*EpubsForTopicWithNumberOfMatchedPages, error) {
	var err error

	// sql query
	const sqlstr = `SELECT e.title, e.author, e.publisher, e.isbn, COUNT( o.tct_id ) AS number_of_occurrences ` +
		` ` +
		`FROM epubs e INNER JOIN locations l ON e.tct_id = l.epub_id ` +
		`INNER JOIN occurrences o ON o.location_id = l.tct_id ` +
		`INNER JOIN topics t ON t.tct_id = o.topic_id ` +
		` ` +
		`WHERE t.tct_id = ? ` +
		` ` +
		`GROUP BY e.title, e.author, e.publisher, e.isbn ` +
		` ` +
		`ORDER BY e.title`

	// run query
	XOLog(sqlstr, topic_id)
	q, err := db.Query(sqlstr, topic_id)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*EpubsForTopicWithNumberOfMatchedPages{}
	for q.Next() {
		eftwnomp := EpubsForTopicWithNumberOfMatchedPages{}

		// scan
		err = q.Scan(&eftwnomp.Title, &eftwnomp.Author, &eftwnomp.Publisher, &eftwnomp.Isbn, &eftwnomp.NumberOfOccurrences)
		if err != nil {
			return nil, err
		}

		res = append(res, &eftwnomp)
	}

	return res, nil
}
