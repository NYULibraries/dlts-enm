// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// RelationRelatedbasket represents a row from 'public.relation_relatedbasket'.
type RelationRelatedbasket struct {
	ID             int  `json:"id"`              // id
	DestinationID  int  `json:"destination_id"`  // destination_id
	RelationtypeID int  `json:"relationtype_id"` // relationtype_id
	SourceID       int  `json:"source_id"`       // source_id
	Forbidden      bool `json:"forbidden"`       // forbidden

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RelationRelatedbasket exists in the database.
func (rr *RelationRelatedbasket) Exists() bool {
	return rr._exists
}

// Deleted provides information if the RelationRelatedbasket has been deleted from the database.
func (rr *RelationRelatedbasket) Deleted() bool {
	return rr._deleted
}

// Insert inserts the RelationRelatedbasket to the database.
func (rr *RelationRelatedbasket) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if rr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.relation_relatedbasket (` +
		`destination_id, relationtype_id, source_id, forbidden` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, rr.DestinationID, rr.RelationtypeID, rr.SourceID, rr.Forbidden)
	err = db.QueryRow(sqlstr, rr.DestinationID, rr.RelationtypeID, rr.SourceID, rr.Forbidden).Scan(&rr.ID)
	if err != nil {
		return err
	}

	// set existence
	rr._exists = true

	return nil
}

// Update updates the RelationRelatedbasket in the database.
func (rr *RelationRelatedbasket) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if rr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.relation_relatedbasket SET (` +
		`destination_id, relationtype_id, source_id, forbidden` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, rr.DestinationID, rr.RelationtypeID, rr.SourceID, rr.Forbidden, rr.ID)
	_, err = db.Exec(sqlstr, rr.DestinationID, rr.RelationtypeID, rr.SourceID, rr.Forbidden, rr.ID)
	return err
}

// Save saves the RelationRelatedbasket to the database.
func (rr *RelationRelatedbasket) Save(db XODB) error {
	if rr.Exists() {
		return rr.Update(db)
	}

	return rr.Insert(db)
}

// Upsert performs an upsert for RelationRelatedbasket.
//
// NOTE: PostgreSQL 9.5+ only
func (rr *RelationRelatedbasket) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if rr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.relation_relatedbasket (` +
		`id, destination_id, relationtype_id, source_id, forbidden` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, destination_id, relationtype_id, source_id, forbidden` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.destination_id, EXCLUDED.relationtype_id, EXCLUDED.source_id, EXCLUDED.forbidden` +
		`)`

	// run query
	XOLog(sqlstr, rr.ID, rr.DestinationID, rr.RelationtypeID, rr.SourceID, rr.Forbidden)
	_, err = db.Exec(sqlstr, rr.ID, rr.DestinationID, rr.RelationtypeID, rr.SourceID, rr.Forbidden)
	if err != nil {
		return err
	}

	// set existence
	rr._exists = true

	return nil
}

// Delete deletes the RelationRelatedbasket from the database.
func (rr *RelationRelatedbasket) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rr._exists {
		return nil
	}

	// if deleted, bail
	if rr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.relation_relatedbasket WHERE id = $1`

	// run query
	XOLog(sqlstr, rr.ID)
	_, err = db.Exec(sqlstr, rr.ID)
	if err != nil {
		return err
	}

	// set deleted
	rr._deleted = true

	return nil
}

// RelationRelationtype returns the RelationRelationtype associated with the RelationRelatedbasket's RelationtypeID (relationtype_id).
//
// Generated from foreign key 'relation_r_relationtype_id_a85493e4_fk_relation_relationtype_id'.
func (rr *RelationRelatedbasket) RelationRelationtype(db XODB) (*RelationRelationtype, error) {
	return RelationRelationtypeByID(db, rr.RelationtypeID)
}

// HitBasketByDestinationID returns the HitBasket associated with the RelationRelatedbasket's DestinationID (destination_id).
//
// Generated from foreign key 'relation_relatedbasket_destination_id_2dc776e7_fk_hit_basket_id'.
func (rr *RelationRelatedbasket) HitBasketByDestinationID(db XODB) (*HitBasket, error) {
	return HitBasketByID(db, rr.DestinationID)
}

// HitBasketBySourceID returns the HitBasket associated with the RelationRelatedbasket's SourceID (source_id).
//
// Generated from foreign key 'relation_relatedbasket_source_id_9ca07dca_fk_hit_basket_id'.
func (rr *RelationRelatedbasket) HitBasketBySourceID(db XODB) (*HitBasket, error) {
	return HitBasketByID(db, rr.SourceID)
}

// RelationRelatedbasketsBySourceID retrieves a row from 'public.relation_relatedbasket' as a RelationRelatedbasket.
//
// Generated from index 'relation_relatedbasket_0afd9202'.
func RelationRelatedbasketsBySourceID(db XODB, sourceID int) ([]*RelationRelatedbasket, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, destination_id, relationtype_id, source_id, forbidden ` +
		`FROM public.relation_relatedbasket ` +
		`WHERE source_id = $1`

	// run query
	XOLog(sqlstr, sourceID)
	q, err := db.Query(sqlstr, sourceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RelationRelatedbasket{}
	for q.Next() {
		rr := RelationRelatedbasket{
			_exists: true,
		}

		// scan
		err = q.Scan(&rr.ID, &rr.DestinationID, &rr.RelationtypeID, &rr.SourceID, &rr.Forbidden)
		if err != nil {
			return nil, err
		}

		res = append(res, &rr)
	}

	return res, nil
}

// RelationRelatedbasketsByDestinationID retrieves a row from 'public.relation_relatedbasket' as a RelationRelatedbasket.
//
// Generated from index 'relation_relatedbasket_279358a3'.
func RelationRelatedbasketsByDestinationID(db XODB, destinationID int) ([]*RelationRelatedbasket, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, destination_id, relationtype_id, source_id, forbidden ` +
		`FROM public.relation_relatedbasket ` +
		`WHERE destination_id = $1`

	// run query
	XOLog(sqlstr, destinationID)
	q, err := db.Query(sqlstr, destinationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RelationRelatedbasket{}
	for q.Next() {
		rr := RelationRelatedbasket{
			_exists: true,
		}

		// scan
		err = q.Scan(&rr.ID, &rr.DestinationID, &rr.RelationtypeID, &rr.SourceID, &rr.Forbidden)
		if err != nil {
			return nil, err
		}

		res = append(res, &rr)
	}

	return res, nil
}

// RelationRelatedbasketsByRelationtypeID retrieves a row from 'public.relation_relatedbasket' as a RelationRelatedbasket.
//
// Generated from index 'relation_relatedbasket_b763becd'.
func RelationRelatedbasketsByRelationtypeID(db XODB, relationtypeID int) ([]*RelationRelatedbasket, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, destination_id, relationtype_id, source_id, forbidden ` +
		`FROM public.relation_relatedbasket ` +
		`WHERE relationtype_id = $1`

	// run query
	XOLog(sqlstr, relationtypeID)
	q, err := db.Query(sqlstr, relationtypeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RelationRelatedbasket{}
	for q.Next() {
		rr := RelationRelatedbasket{
			_exists: true,
		}

		// scan
		err = q.Scan(&rr.ID, &rr.DestinationID, &rr.RelationtypeID, &rr.SourceID, &rr.Forbidden)
		if err != nil {
			return nil, err
		}

		res = append(res, &rr)
	}

	return res, nil
}

// RelationRelatedbasketByID retrieves a row from 'public.relation_relatedbasket' as a RelationRelatedbasket.
//
// Generated from index 'relation_relatedbasket_pkey'.
func RelationRelatedbasketByID(db XODB, id int) (*RelationRelatedbasket, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, destination_id, relationtype_id, source_id, forbidden ` +
		`FROM public.relation_relatedbasket ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	rr := RelationRelatedbasket{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&rr.ID, &rr.DestinationID, &rr.RelationtypeID, &rr.SourceID, &rr.Forbidden)
	if err != nil {
		return nil, err
	}

	return &rr, nil
}

// RelationRelatedbasketByRelationtypeIDSourceIDDestinationID retrieves a row from 'public.relation_relatedbasket' as a RelationRelatedbasket.
//
// Generated from index 'relation_relatedbasket_relationtype_id_76099753_uniq'.
func RelationRelatedbasketByRelationtypeIDSourceIDDestinationID(db XODB, relationtypeID int, sourceID int, destinationID int) (*RelationRelatedbasket, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, destination_id, relationtype_id, source_id, forbidden ` +
		`FROM public.relation_relatedbasket ` +
		`WHERE relationtype_id = $1 AND source_id = $2 AND destination_id = $3`

	// run query
	XOLog(sqlstr, relationtypeID, sourceID, destinationID)
	rr := RelationRelatedbasket{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, relationtypeID, sourceID, destinationID).Scan(&rr.ID, &rr.DestinationID, &rr.RelationtypeID, &rr.SourceID, &rr.Forbidden)
	if err != nil {
		return nil, err
	}

	return &rr, nil
}
