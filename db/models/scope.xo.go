// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// Scope represents a row from 'enm.scopes'.
type Scope struct {
	TctID int `json:"tct_id"` // tct_id
	Scope int `json:"scope"`  // scope

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Scope exists in the database.
func (s *Scope) Exists() bool {
	return s._exists
}

// Deleted provides information if the Scope has been deleted from the database.
func (s *Scope) Deleted() bool {
	return s._deleted
}

// Insert inserts the Scope to the database.
func (s *Scope) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO enm.scopes (` +
		`tct_id, scope` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, s.TctID, s.Scope)
	_, err = db.Exec(sqlstr, s.TctID, s.Scope)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Update updates the Scope in the database.
func (s *Scope) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE enm.scopes SET ` +
		`scope = ?` +
		` WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, s.Scope, s.TctID)
	_, err = db.Exec(sqlstr, s.Scope, s.TctID)
	return err
}

// Save saves the Scope to the database.
func (s *Scope) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Delete deletes the Scope from the database.
func (s *Scope) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM enm.scopes WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, s.TctID)
	_, err = db.Exec(sqlstr, s.TctID)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// ScopesByScope retrieves a row from 'enm.scopes' as a Scope.
//
// Generated from index 'scope'.
func ScopesByScope(db XODB, scope int) ([]*Scope, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, scope ` +
		`FROM enm.scopes ` +
		`WHERE scope = ?`

	// run query
	XOLog(sqlstr, scope)
	q, err := db.Query(sqlstr, scope)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Scope{}
	for q.Next() {
		s := Scope{
			_exists: true,
		}

		// scan
		err = q.Scan(&s.TctID, &s.Scope)
		if err != nil {
			return nil, err
		}

		res = append(res, &s)
	}

	return res, nil
}

// ScopeByTctID retrieves a row from 'enm.scopes' as a Scope.
//
// Generated from index 'scopes_tct_id_pkey'.
func ScopeByTctID(db XODB, tctID int) (*Scope, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, scope ` +
		`FROM enm.scopes ` +
		`WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, tctID)
	s := Scope{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tctID).Scan(&s.TctID, &s.Scope)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
