// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// RelationDirection represents a row from 'enm.relation_direction'.
type RelationDirection struct {
	ID        int    `json:"id"`        // id
	Direction string `json:"direction"` // direction

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RelationDirection exists in the database.
func (rd *RelationDirection) Exists() bool {
	return rd._exists
}

// Deleted provides information if the RelationDirection has been deleted from the database.
func (rd *RelationDirection) Deleted() bool {
	return rd._deleted
}

// Insert inserts the RelationDirection to the database.
func (rd *RelationDirection) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if rd._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO enm.relation_direction (` +
		`id, direction` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, rd.ID, rd.Direction)
	_, err = db.Exec(sqlstr, rd.ID, rd.Direction)
	if err != nil {
		return err
	}

	// set existence
	rd._exists = true

	return nil
}

// Update updates the RelationDirection in the database.
func (rd *RelationDirection) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rd._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if rd._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE enm.relation_direction SET ` +
		`direction = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, rd.Direction, rd.ID)
	_, err = db.Exec(sqlstr, rd.Direction, rd.ID)
	return err
}

// Save saves the RelationDirection to the database.
func (rd *RelationDirection) Save(db XODB) error {
	if rd.Exists() {
		return rd.Update(db)
	}

	return rd.Insert(db)
}

// Delete deletes the RelationDirection from the database.
func (rd *RelationDirection) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rd._exists {
		return nil
	}

	// if deleted, bail
	if rd._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM enm.relation_direction WHERE id = ?`

	// run query
	XOLog(sqlstr, rd.ID)
	_, err = db.Exec(sqlstr, rd.ID)
	if err != nil {
		return err
	}

	// set deleted
	rd._deleted = true

	return nil
}

// RelationDirectionByID retrieves a row from 'enm.relation_direction' as a RelationDirection.
//
// Generated from index 'relation_direction_id_pkey'.
func RelationDirectionByID(db XODB, id int) (*RelationDirection, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, direction ` +
		`FROM enm.relation_direction ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	rd := RelationDirection{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&rd.ID, &rd.Direction)
	if err != nil {
		return nil, err
	}

	return &rd, nil
}
