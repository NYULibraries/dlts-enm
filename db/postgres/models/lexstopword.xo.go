// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// LexStopword represents a row from 'public.lex_stopword'.
type LexStopword struct {
	ID   int    `json:"id"`   // id
	Word string `json:"word"` // word

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the LexStopword exists in the database.
func (ls *LexStopword) Exists() bool {
	return ls._exists
}

// Deleted provides information if the LexStopword has been deleted from the database.
func (ls *LexStopword) Deleted() bool {
	return ls._deleted
}

// Insert inserts the LexStopword to the database.
func (ls *LexStopword) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ls._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.lex_stopword (` +
		`word` +
		`) VALUES (` +
		`$1` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, ls.Word)
	err = db.QueryRow(sqlstr, ls.Word).Scan(&ls.ID)
	if err != nil {
		return err
	}

	// set existence
	ls._exists = true

	return nil
}

// Update updates the LexStopword in the database.
func (ls *LexStopword) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ls._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ls._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.lex_stopword SET (` +
		`word` +
		`) = ( ` +
		`$1` +
		`) WHERE id = $2`

	// run query
	XOLog(sqlstr, ls.Word, ls.ID)
	_, err = db.Exec(sqlstr, ls.Word, ls.ID)
	return err
}

// Save saves the LexStopword to the database.
func (ls *LexStopword) Save(db XODB) error {
	if ls.Exists() {
		return ls.Update(db)
	}

	return ls.Insert(db)
}

// Upsert performs an upsert for LexStopword.
//
// NOTE: PostgreSQL 9.5+ only
func (ls *LexStopword) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ls._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.lex_stopword (` +
		`id, word` +
		`) VALUES (` +
		`$1, $2` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, word` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.word` +
		`)`

	// run query
	XOLog(sqlstr, ls.ID, ls.Word)
	_, err = db.Exec(sqlstr, ls.ID, ls.Word)
	if err != nil {
		return err
	}

	// set existence
	ls._exists = true

	return nil
}

// Delete deletes the LexStopword from the database.
func (ls *LexStopword) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ls._exists {
		return nil
	}

	// if deleted, bail
	if ls._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.lex_stopword WHERE id = $1`

	// run query
	XOLog(sqlstr, ls.ID)
	_, err = db.Exec(sqlstr, ls.ID)
	if err != nil {
		return err
	}

	// set deleted
	ls._deleted = true

	return nil
}

// LexStopwordByID retrieves a row from 'public.lex_stopword' as a LexStopword.
//
// Generated from index 'lex_stopword_pkey'.
func LexStopwordByID(db XODB, id int) (*LexStopword, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, word ` +
		`FROM public.lex_stopword ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	ls := LexStopword{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ls.ID, &ls.Word)
	if err != nil {
		return nil, err
	}

	return &ls, nil
}

// LexStopwordsByWord retrieves a row from 'public.lex_stopword' as a LexStopword.
//
// Generated from index 'lex_stopword_word_1e92c643_like'.
func LexStopwordsByWord(db XODB, word string) ([]*LexStopword, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, word ` +
		`FROM public.lex_stopword ` +
		`WHERE word = $1`

	// run query
	XOLog(sqlstr, word)
	q, err := db.Query(sqlstr, word)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*LexStopword{}
	for q.Next() {
		ls := LexStopword{
			_exists: true,
		}

		// scan
		err = q.Scan(&ls.ID, &ls.Word)
		if err != nil {
			return nil, err
		}

		res = append(res, &ls)
	}

	return res, nil
}

// LexStopwordByWord retrieves a row from 'public.lex_stopword' as a LexStopword.
//
// Generated from index 'lex_stopword_word_key'.
func LexStopwordByWord(db XODB, word string) (*LexStopword, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, word ` +
		`FROM public.lex_stopword ` +
		`WHERE word = $1`

	// run query
	XOLog(sqlstr, word)
	ls := LexStopword{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, word).Scan(&ls.ID, &ls.Word)
	if err != nil {
		return nil, err
	}

	return &ls, nil
}
