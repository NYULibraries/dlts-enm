// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// WeblinksVocabulary represents a row from 'enm.weblinks_vocabulary'.
type WeblinksVocabulary struct {
	ID         int    `json:"id"`         // id
	Vocabulary string `json:"vocabulary"` // vocabulary

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the WeblinksVocabulary exists in the database.
func (wv *WeblinksVocabulary) Exists() bool {
	return wv._exists
}

// Deleted provides information if the WeblinksVocabulary has been deleted from the database.
func (wv *WeblinksVocabulary) Deleted() bool {
	return wv._deleted
}

// Insert inserts the WeblinksVocabulary to the database.
func (wv *WeblinksVocabulary) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if wv._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO enm.weblinks_vocabulary (` +
		`vocabulary` +
		`) VALUES (` +
		`?` +
		`)`

	// run query
	XOLog(sqlstr, wv.Vocabulary)
	res, err := db.Exec(sqlstr, wv.Vocabulary)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	wv.ID = int(id)
	wv._exists = true

	return nil
}

// Update updates the WeblinksVocabulary in the database.
func (wv *WeblinksVocabulary) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wv._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if wv._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE enm.weblinks_vocabulary SET ` +
		`vocabulary = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, wv.Vocabulary, wv.ID)
	_, err = db.Exec(sqlstr, wv.Vocabulary, wv.ID)
	return err
}

// Save saves the WeblinksVocabulary to the database.
func (wv *WeblinksVocabulary) Save(db XODB) error {
	if wv.Exists() {
		return wv.Update(db)
	}

	return wv.Insert(db)
}

// Delete deletes the WeblinksVocabulary from the database.
func (wv *WeblinksVocabulary) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !wv._exists {
		return nil
	}

	// if deleted, bail
	if wv._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM enm.weblinks_vocabulary WHERE id = ?`

	// run query
	XOLog(sqlstr, wv.ID)
	_, err = db.Exec(sqlstr, wv.ID)
	if err != nil {
		return err
	}

	// set deleted
	wv._deleted = true

	return nil
}

// WeblinksVocabularyByID retrieves a row from 'enm.weblinks_vocabulary' as a WeblinksVocabulary.
//
// Generated from index 'weblinks_vocabulary_id_pkey'.
func WeblinksVocabularyByID(db XODB, id int) (*WeblinksVocabulary, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, vocabulary ` +
		`FROM enm.weblinks_vocabulary ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	wv := WeblinksVocabulary{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&wv.ID, &wv.Vocabulary)
	if err != nil {
		return nil, err
	}

	return &wv, nil
}
