// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// OccurrenceLocation represents a row from 'public.occurrence_location'.
type OccurrenceLocation struct {
	ID             int            `json:"id"`              // id
	SequenceNumber sql.NullInt64  `json:"sequence_number"` // sequence_number
	Filepath       string         `json:"filepath"`        // filepath
	Localid        sql.NullString `json:"localid"`         // localid
	Context        sql.NullString `json:"context"`         // context
	ContentID      sql.NullInt64  `json:"content_id"`      // content_id
	DocumentID     sql.NullInt64  `json:"document_id"`     // document_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OccurrenceLocation exists in the database.
func (ol *OccurrenceLocation) Exists() bool {
	return ol._exists
}

// Deleted provides information if the OccurrenceLocation has been deleted from the database.
func (ol *OccurrenceLocation) Deleted() bool {
	return ol._deleted
}

// Insert inserts the OccurrenceLocation to the database.
func (ol *OccurrenceLocation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ol._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.occurrence_location (` +
		`sequence_number, filepath, localid, context, content_id, document_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, ol.SequenceNumber, ol.Filepath, ol.Localid, ol.Context, ol.ContentID, ol.DocumentID)
	err = db.QueryRow(sqlstr, ol.SequenceNumber, ol.Filepath, ol.Localid, ol.Context, ol.ContentID, ol.DocumentID).Scan(&ol.ID)
	if err != nil {
		return err
	}

	// set existence
	ol._exists = true

	return nil
}

// Update updates the OccurrenceLocation in the database.
func (ol *OccurrenceLocation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ol._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ol._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.occurrence_location SET (` +
		`sequence_number, filepath, localid, context, content_id, document_id` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE id = $7`

	// run query
	XOLog(sqlstr, ol.SequenceNumber, ol.Filepath, ol.Localid, ol.Context, ol.ContentID, ol.DocumentID, ol.ID)
	_, err = db.Exec(sqlstr, ol.SequenceNumber, ol.Filepath, ol.Localid, ol.Context, ol.ContentID, ol.DocumentID, ol.ID)
	return err
}

// Save saves the OccurrenceLocation to the database.
func (ol *OccurrenceLocation) Save(db XODB) error {
	if ol.Exists() {
		return ol.Update(db)
	}

	return ol.Insert(db)
}

// Upsert performs an upsert for OccurrenceLocation.
//
// NOTE: PostgreSQL 9.5+ only
func (ol *OccurrenceLocation) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if ol._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.occurrence_location (` +
		`id, sequence_number, filepath, localid, context, content_id, document_id` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, sequence_number, filepath, localid, context, content_id, document_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.sequence_number, EXCLUDED.filepath, EXCLUDED.localid, EXCLUDED.context, EXCLUDED.content_id, EXCLUDED.document_id` +
		`)`

	// run query
	XOLog(sqlstr, ol.ID, ol.SequenceNumber, ol.Filepath, ol.Localid, ol.Context, ol.ContentID, ol.DocumentID)
	_, err = db.Exec(sqlstr, ol.ID, ol.SequenceNumber, ol.Filepath, ol.Localid, ol.Context, ol.ContentID, ol.DocumentID)
	if err != nil {
		return err
	}

	// set existence
	ol._exists = true

	return nil
}

// Delete deletes the OccurrenceLocation from the database.
func (ol *OccurrenceLocation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ol._exists {
		return nil
	}

	// if deleted, bail
	if ol._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.occurrence_location WHERE id = $1`

	// run query
	XOLog(sqlstr, ol.ID)
	_, err = db.Exec(sqlstr, ol.ID)
	if err != nil {
		return err
	}

	// set deleted
	ol._deleted = true

	return nil
}

// OccurrenceDocument returns the OccurrenceDocument associated with the OccurrenceLocation's DocumentID (document_id).
//
// Generated from foreign key 'occurrence_locat_document_id_74762608_fk_occurrence_document_id'.
func (ol *OccurrenceLocation) OccurrenceDocument(db XODB) (*OccurrenceDocument, error) {
	return OccurrenceDocumentByID(db, int(ol.DocumentID.Int64))
}

// OccurrenceContent returns the OccurrenceContent associated with the OccurrenceLocation's ContentID (content_id).
//
// Generated from foreign key 'occurrence_locatio_content_id_c580bd8e_fk_occurrence_content_id'.
func (ol *OccurrenceLocation) OccurrenceContent(db XODB) (*OccurrenceContent, error) {
	return OccurrenceContentByID(db, int(ol.ContentID.Int64))
}

// OccurrenceLocationsByContentID retrieves a row from 'public.occurrence_location' as a OccurrenceLocation.
//
// Generated from index 'occurrence_location_e14f02ad'.
func OccurrenceLocationsByContentID(db XODB, contentID sql.NullInt64) ([]*OccurrenceLocation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sequence_number, filepath, localid, context, content_id, document_id ` +
		`FROM public.occurrence_location ` +
		`WHERE content_id = $1`

	// run query
	XOLog(sqlstr, contentID)
	q, err := db.Query(sqlstr, contentID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*OccurrenceLocation{}
	for q.Next() {
		ol := OccurrenceLocation{
			_exists: true,
		}

		// scan
		err = q.Scan(&ol.ID, &ol.SequenceNumber, &ol.Filepath, &ol.Localid, &ol.Context, &ol.ContentID, &ol.DocumentID)
		if err != nil {
			return nil, err
		}

		res = append(res, &ol)
	}

	return res, nil
}

// OccurrenceLocationsByDocumentID retrieves a row from 'public.occurrence_location' as a OccurrenceLocation.
//
// Generated from index 'occurrence_location_e7fafc10'.
func OccurrenceLocationsByDocumentID(db XODB, documentID sql.NullInt64) ([]*OccurrenceLocation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sequence_number, filepath, localid, context, content_id, document_id ` +
		`FROM public.occurrence_location ` +
		`WHERE document_id = $1`

	// run query
	XOLog(sqlstr, documentID)
	q, err := db.Query(sqlstr, documentID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*OccurrenceLocation{}
	for q.Next() {
		ol := OccurrenceLocation{
			_exists: true,
		}

		// scan
		err = q.Scan(&ol.ID, &ol.SequenceNumber, &ol.Filepath, &ol.Localid, &ol.Context, &ol.ContentID, &ol.DocumentID)
		if err != nil {
			return nil, err
		}

		res = append(res, &ol)
	}

	return res, nil
}

// OccurrenceLocationByLocalidFilepath retrieves a row from 'public.occurrence_location' as a OccurrenceLocation.
//
// Generated from index 'occurrence_location_localid_01670c73_uniq'.
func OccurrenceLocationByLocalidFilepath(db XODB, localid sql.NullString, filepath string) (*OccurrenceLocation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sequence_number, filepath, localid, context, content_id, document_id ` +
		`FROM public.occurrence_location ` +
		`WHERE localid = $1 AND filepath = $2`

	// run query
	XOLog(sqlstr, localid, filepath)
	ol := OccurrenceLocation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, localid, filepath).Scan(&ol.ID, &ol.SequenceNumber, &ol.Filepath, &ol.Localid, &ol.Context, &ol.ContentID, &ol.DocumentID)
	if err != nil {
		return nil, err
	}

	return &ol, nil
}

// OccurrenceLocationByID retrieves a row from 'public.occurrence_location' as a OccurrenceLocation.
//
// Generated from index 'occurrence_location_pkey'.
func OccurrenceLocationByID(db XODB, id int) (*OccurrenceLocation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, sequence_number, filepath, localid, context, content_id, document_id ` +
		`FROM public.occurrence_location ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	ol := OccurrenceLocation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ol.ID, &ol.SequenceNumber, &ol.Filepath, &ol.Localid, &ol.Context, &ol.ContentID, &ol.DocumentID)
	if err != nil {
		return nil, err
	}

	return &ol, nil
}
