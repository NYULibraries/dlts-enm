// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

// ExternalRelationsForTopic represents a row from '[custom external_relations_for_topic]'.
type ExternalRelationsForTopic struct {
	Vocabulary   string // vocabulary
	URL          string // url
	Relationship string // relationship
}

// ExternalRelationsForTopicsByTopic_id runs a custom query, returning results as ExternalRelationsForTopic.
func ExternalRelationsForTopicsByTopic_id(db XODB, topic_id int) ([]*ExternalRelationsForTopic, error) {
	var err error

	// sql query
	const sqlstr = `SELECT wv.vocabulary, w.url, wr.relationship ` +
		` ` +
		`FROM topics t INNER JOIN topics_weblinks tw ON t.tct_id = tw.topic_id ` +
		`INNER JOIN weblinks w ON w.tct_id = tw.weblink_id ` +
		`INNER JOIN weblinks_relationship wr ON wr.id = w.weblinks_relationship_id ` +
		`INNER JOIN weblinks_vocabulary wv ON wv.id = w.weblinks_vocabulary_id ` +
		` ` +
		`WHERE t.tct_id = ? ` +
		` ` +
		`ORDER BY wv.vocabulary, w.url, wr.relationship`

	// run query
	XOLog(sqlstr, topic_id)
	q, err := db.Query(sqlstr, topic_id)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ExternalRelationsForTopic{}
	for q.Next() {
		erft := ExternalRelationsForTopic{}

		// scan
		err = q.Scan(&erft.Vocabulary, &erft.URL, &erft.Relationship)
		if err != nil {
			return nil, err
		}

		res = append(res, &erft)
	}

	return res, nil
}
