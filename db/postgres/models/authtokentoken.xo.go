// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
	"time"
)

// AuthtokenToken represents a row from 'public.authtoken_token'.
type AuthtokenToken struct {
	Key     string    `json:"key"`     // key
	Created time.Time `json:"created"` // created
	UserID  int       `json:"user_id"` // user_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AuthtokenToken exists in the database.
func (at *AuthtokenToken) Exists() bool {
	return at._exists
}

// Deleted provides information if the AuthtokenToken has been deleted from the database.
func (at *AuthtokenToken) Deleted() bool {
	return at._deleted
}

// Insert inserts the AuthtokenToken to the database.
func (at *AuthtokenToken) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if at._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.authtoken_token (` +
		`key, created, user_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, at.Key, at.Created, at.UserID)
	err = db.QueryRow(sqlstr, at.Key, at.Created, at.UserID).Scan(&at.Key)
	if err != nil {
		return err
	}

	// set existence
	at._exists = true

	return nil
}

// Update updates the AuthtokenToken in the database.
func (at *AuthtokenToken) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !at._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if at._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.authtoken_token SET (` +
		`created, user_id` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE key = $3`

	// run query
	XOLog(sqlstr, at.Created, at.UserID, at.Key)
	_, err = db.Exec(sqlstr, at.Created, at.UserID, at.Key)
	return err
}

// Save saves the AuthtokenToken to the database.
func (at *AuthtokenToken) Save(db XODB) error {
	if at.Exists() {
		return at.Update(db)
	}

	return at.Insert(db)
}

// Upsert performs an upsert for AuthtokenToken.
//
// NOTE: PostgreSQL 9.5+ only
func (at *AuthtokenToken) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if at._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.authtoken_token (` +
		`key, created, user_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (key) DO UPDATE SET (` +
		`key, created, user_id` +
		`) = (` +
		`EXCLUDED.key, EXCLUDED.created, EXCLUDED.user_id` +
		`)`

	// run query
	XOLog(sqlstr, at.Key, at.Created, at.UserID)
	_, err = db.Exec(sqlstr, at.Key, at.Created, at.UserID)
	if err != nil {
		return err
	}

	// set existence
	at._exists = true

	return nil
}

// Delete deletes the AuthtokenToken from the database.
func (at *AuthtokenToken) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !at._exists {
		return nil
	}

	// if deleted, bail
	if at._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.authtoken_token WHERE key = $1`

	// run query
	XOLog(sqlstr, at.Key)
	_, err = db.Exec(sqlstr, at.Key)
	if err != nil {
		return err
	}

	// set deleted
	at._deleted = true

	return nil
}

// AuthUser returns the AuthUser associated with the AuthtokenToken's UserID (user_id).
//
// Generated from foreign key 'authtoken_token_user_id_35299eff_fk_auth_user_id'.
func (at *AuthtokenToken) AuthUser(db XODB) (*AuthUser, error) {
	return AuthUserByID(db, at.UserID)
}

// AuthtokenTokensByKey retrieves a row from 'public.authtoken_token' as a AuthtokenToken.
//
// Generated from index 'authtoken_token_key_10f0b77e_like'.
func AuthtokenTokensByKey(db XODB, key string) ([]*AuthtokenToken, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`key, created, user_id ` +
		`FROM public.authtoken_token ` +
		`WHERE key = $1`

	// run query
	XOLog(sqlstr, key)
	q, err := db.Query(sqlstr, key)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AuthtokenToken{}
	for q.Next() {
		at := AuthtokenToken{
			_exists: true,
		}

		// scan
		err = q.Scan(&at.Key, &at.Created, &at.UserID)
		if err != nil {
			return nil, err
		}

		res = append(res, &at)
	}

	return res, nil
}

// AuthtokenTokenByKey retrieves a row from 'public.authtoken_token' as a AuthtokenToken.
//
// Generated from index 'authtoken_token_pkey'.
func AuthtokenTokenByKey(db XODB, key string) (*AuthtokenToken, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`key, created, user_id ` +
		`FROM public.authtoken_token ` +
		`WHERE key = $1`

	// run query
	XOLog(sqlstr, key)
	at := AuthtokenToken{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, key).Scan(&at.Key, &at.Created, &at.UserID)
	if err != nil {
		return nil, err
	}

	return &at, nil
}

// AuthtokenTokenByUserID retrieves a row from 'public.authtoken_token' as a AuthtokenToken.
//
// Generated from index 'authtoken_token_user_id_key'.
func AuthtokenTokenByUserID(db XODB, userID int) (*AuthtokenToken, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`key, created, user_id ` +
		`FROM public.authtoken_token ` +
		`WHERE user_id = $1`

	// run query
	XOLog(sqlstr, userID)
	at := AuthtokenToken{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userID).Scan(&at.Key, &at.Created, &at.UserID)
	if err != nil {
		return nil, err
	}

	return &at, nil
}
