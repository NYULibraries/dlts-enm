// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// HitHit represents a row from 'public.hit_hit'.
type HitHit struct {
	ID        int            `json:"id"`        // id
	Name      string         `json:"name"`      // name
	Slug      string         `json:"slug"`      // slug
	Hidden    bool           `json:"hidden"`    // hidden
	Preferred bool           `json:"preferred"` // preferred
	Bypass    bool           `json:"bypass"`    // bypass
	BasketID  sql.NullInt64  `json:"basket_id"` // basket_id
	ScopeID   int            `json:"scope_id"`  // scope_id
	Kind      sql.NullString `json:"kind"`      // kind

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the HitHit exists in the database.
func (hh *HitHit) Exists() bool {
	return hh._exists
}

// Deleted provides information if the HitHit has been deleted from the database.
func (hh *HitHit) Deleted() bool {
	return hh._deleted
}

// Insert inserts the HitHit to the database.
func (hh *HitHit) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if hh._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.hit_hit (` +
		`name, slug, hidden, preferred, bypass, basket_id, scope_id, kind` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, hh.Name, hh.Slug, hh.Hidden, hh.Preferred, hh.Bypass, hh.BasketID, hh.ScopeID, hh.Kind)
	err = db.QueryRow(sqlstr, hh.Name, hh.Slug, hh.Hidden, hh.Preferred, hh.Bypass, hh.BasketID, hh.ScopeID, hh.Kind).Scan(&hh.ID)
	if err != nil {
		return err
	}

	// set existence
	hh._exists = true

	return nil
}

// Update updates the HitHit in the database.
func (hh *HitHit) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hh._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if hh._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.hit_hit SET (` +
		`name, slug, hidden, preferred, bypass, basket_id, scope_id, kind` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) WHERE id = $9`

	// run query
	XOLog(sqlstr, hh.Name, hh.Slug, hh.Hidden, hh.Preferred, hh.Bypass, hh.BasketID, hh.ScopeID, hh.Kind, hh.ID)
	_, err = db.Exec(sqlstr, hh.Name, hh.Slug, hh.Hidden, hh.Preferred, hh.Bypass, hh.BasketID, hh.ScopeID, hh.Kind, hh.ID)
	return err
}

// Save saves the HitHit to the database.
func (hh *HitHit) Save(db XODB) error {
	if hh.Exists() {
		return hh.Update(db)
	}

	return hh.Insert(db)
}

// Upsert performs an upsert for HitHit.
//
// NOTE: PostgreSQL 9.5+ only
func (hh *HitHit) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if hh._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.hit_hit (` +
		`id, name, slug, hidden, preferred, bypass, basket_id, scope_id, kind` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, slug, hidden, preferred, bypass, basket_id, scope_id, kind` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.slug, EXCLUDED.hidden, EXCLUDED.preferred, EXCLUDED.bypass, EXCLUDED.basket_id, EXCLUDED.scope_id, EXCLUDED.kind` +
		`)`

	// run query
	XOLog(sqlstr, hh.ID, hh.Name, hh.Slug, hh.Hidden, hh.Preferred, hh.Bypass, hh.BasketID, hh.ScopeID, hh.Kind)
	_, err = db.Exec(sqlstr, hh.ID, hh.Name, hh.Slug, hh.Hidden, hh.Preferred, hh.Bypass, hh.BasketID, hh.ScopeID, hh.Kind)
	if err != nil {
		return err
	}

	// set existence
	hh._exists = true

	return nil
}

// Delete deletes the HitHit from the database.
func (hh *HitHit) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hh._exists {
		return nil
	}

	// if deleted, bail
	if hh._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.hit_hit WHERE id = $1`

	// run query
	XOLog(sqlstr, hh.ID)
	_, err = db.Exec(sqlstr, hh.ID)
	if err != nil {
		return err
	}

	// set deleted
	hh._deleted = true

	return nil
}

// HitBasket returns the HitBasket associated with the HitHit's BasketID (basket_id).
//
// Generated from foreign key 'hit_hit_basket_id_ee241c51_fk_hit_basket_id'.
func (hh *HitHit) HitBasket(db XODB) (*HitBasket, error) {
	return HitBasketByID(db, int(hh.BasketID.Int64))
}

// HitScope returns the HitScope associated with the HitHit's ScopeID (scope_id).
//
// Generated from foreign key 'hit_hit_scope_id_e36d88b4_fk_hit_scope_id'.
func (hh *HitHit) HitScope(db XODB) (*HitScope, error) {
	return HitScopeByID(db, hh.ScopeID)
}

// HitHitsBySlug retrieves a row from 'public.hit_hit' as a HitHit.
//
// Generated from index 'hit_hit_2dbcba41'.
func HitHitsBySlug(db XODB, slug string) ([]*HitHit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, slug, hidden, preferred, bypass, basket_id, scope_id, kind ` +
		`FROM public.hit_hit ` +
		`WHERE slug = $1`

	// run query
	XOLog(sqlstr, slug)
	q, err := db.Query(sqlstr, slug)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*HitHit{}
	for q.Next() {
		hh := HitHit{
			_exists: true,
		}

		// scan
		err = q.Scan(&hh.ID, &hh.Name, &hh.Slug, &hh.Hidden, &hh.Preferred, &hh.Bypass, &hh.BasketID, &hh.ScopeID, &hh.Kind)
		if err != nil {
			return nil, err
		}

		res = append(res, &hh)
	}

	return res, nil
}

// HitHitsByScopeID retrieves a row from 'public.hit_hit' as a HitHit.
//
// Generated from index 'hit_hit_945206a2'.
func HitHitsByScopeID(db XODB, scopeID int) ([]*HitHit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, slug, hidden, preferred, bypass, basket_id, scope_id, kind ` +
		`FROM public.hit_hit ` +
		`WHERE scope_id = $1`

	// run query
	XOLog(sqlstr, scopeID)
	q, err := db.Query(sqlstr, scopeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*HitHit{}
	for q.Next() {
		hh := HitHit{
			_exists: true,
		}

		// scan
		err = q.Scan(&hh.ID, &hh.Name, &hh.Slug, &hh.Hidden, &hh.Preferred, &hh.Bypass, &hh.BasketID, &hh.ScopeID, &hh.Kind)
		if err != nil {
			return nil, err
		}

		res = append(res, &hh)
	}

	return res, nil
}

// HitHitsByBasketID retrieves a row from 'public.hit_hit' as a HitHit.
//
// Generated from index 'hit_hit_afdeaea9'.
func HitHitsByBasketID(db XODB, basketID sql.NullInt64) ([]*HitHit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, slug, hidden, preferred, bypass, basket_id, scope_id, kind ` +
		`FROM public.hit_hit ` +
		`WHERE basket_id = $1`

	// run query
	XOLog(sqlstr, basketID)
	q, err := db.Query(sqlstr, basketID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*HitHit{}
	for q.Next() {
		hh := HitHit{
			_exists: true,
		}

		// scan
		err = q.Scan(&hh.ID, &hh.Name, &hh.Slug, &hh.Hidden, &hh.Preferred, &hh.Bypass, &hh.BasketID, &hh.ScopeID, &hh.Kind)
		if err != nil {
			return nil, err
		}

		res = append(res, &hh)
	}

	return res, nil
}

// HitHitsByName retrieves a row from 'public.hit_hit' as a HitHit.
//
// Generated from index 'hit_hit_b068931c'.
func HitHitsByName(db XODB, name string) ([]*HitHit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, slug, hidden, preferred, bypass, basket_id, scope_id, kind ` +
		`FROM public.hit_hit ` +
		`WHERE name = $1`

	// run query
	XOLog(sqlstr, name)
	q, err := db.Query(sqlstr, name)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*HitHit{}
	for q.Next() {
		hh := HitHit{
			_exists: true,
		}

		// scan
		err = q.Scan(&hh.ID, &hh.Name, &hh.Slug, &hh.Hidden, &hh.Preferred, &hh.Bypass, &hh.BasketID, &hh.ScopeID, &hh.Kind)
		if err != nil {
			return nil, err
		}

		res = append(res, &hh)
	}

	return res, nil
}

// HitHitByNameScopeID retrieves a row from 'public.hit_hit' as a HitHit.
//
// Generated from index 'hit_hit_name_4ad65e77_uniq'.
func HitHitByNameScopeID(db XODB, name string, scopeID int) (*HitHit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, slug, hidden, preferred, bypass, basket_id, scope_id, kind ` +
		`FROM public.hit_hit ` +
		`WHERE name = $1 AND scope_id = $2`

	// run query
	XOLog(sqlstr, name, scopeID)
	hh := HitHit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, scopeID).Scan(&hh.ID, &hh.Name, &hh.Slug, &hh.Hidden, &hh.Preferred, &hh.Bypass, &hh.BasketID, &hh.ScopeID, &hh.Kind)
	if err != nil {
		return nil, err
	}

	return &hh, nil
}

// HitHitByID retrieves a row from 'public.hit_hit' as a HitHit.
//
// Generated from index 'hit_hit_pkey'.
func HitHitByID(db XODB, id int) (*HitHit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, slug, hidden, preferred, bypass, basket_id, scope_id, kind ` +
		`FROM public.hit_hit ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	hh := HitHit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&hh.ID, &hh.Name, &hh.Slug, &hh.Hidden, &hh.Preferred, &hh.Bypass, &hh.BasketID, &hh.ScopeID, &hh.Kind)
	if err != nil {
		return nil, err
	}

	return &hh, nil
}
