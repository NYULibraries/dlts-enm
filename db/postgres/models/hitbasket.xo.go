// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// HitBasket represents a row from 'public.hit_basket'.
type HitBasket struct {
	ID          int    `json:"id"`           // id
	Label       string `json:"label"`        // label
	DisplayName string `json:"display_name"` // display_name
	Description string `json:"description"`  // description

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the HitBasket exists in the database.
func (hb *HitBasket) Exists() bool {
	return hb._exists
}

// Deleted provides information if the HitBasket has been deleted from the database.
func (hb *HitBasket) Deleted() bool {
	return hb._deleted
}

// Insert inserts the HitBasket to the database.
func (hb *HitBasket) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if hb._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.hit_basket (` +
		`label, display_name, description` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, hb.Label, hb.DisplayName, hb.Description)
	err = db.QueryRow(sqlstr, hb.Label, hb.DisplayName, hb.Description).Scan(&hb.ID)
	if err != nil {
		return err
	}

	// set existence
	hb._exists = true

	return nil
}

// Update updates the HitBasket in the database.
func (hb *HitBasket) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hb._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if hb._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.hit_basket SET (` +
		`label, display_name, description` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, hb.Label, hb.DisplayName, hb.Description, hb.ID)
	_, err = db.Exec(sqlstr, hb.Label, hb.DisplayName, hb.Description, hb.ID)
	return err
}

// Save saves the HitBasket to the database.
func (hb *HitBasket) Save(db XODB) error {
	if hb.Exists() {
		return hb.Update(db)
	}

	return hb.Insert(db)
}

// Upsert performs an upsert for HitBasket.
//
// NOTE: PostgreSQL 9.5+ only
func (hb *HitBasket) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if hb._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.hit_basket (` +
		`id, label, display_name, description` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, label, display_name, description` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.label, EXCLUDED.display_name, EXCLUDED.description` +
		`)`

	// run query
	XOLog(sqlstr, hb.ID, hb.Label, hb.DisplayName, hb.Description)
	_, err = db.Exec(sqlstr, hb.ID, hb.Label, hb.DisplayName, hb.Description)
	if err != nil {
		return err
	}

	// set existence
	hb._exists = true

	return nil
}

// Delete deletes the HitBasket from the database.
func (hb *HitBasket) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hb._exists {
		return nil
	}

	// if deleted, bail
	if hb._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.hit_basket WHERE id = $1`

	// run query
	XOLog(sqlstr, hb.ID)
	_, err = db.Exec(sqlstr, hb.ID)
	if err != nil {
		return err
	}

	// set deleted
	hb._deleted = true

	return nil
}

// HitBasketsByLabel retrieves a row from 'public.hit_basket' as a HitBasket.
//
// Generated from index 'hit_basket_label_bdd340e0_like'.
func HitBasketsByLabel(db XODB, label string) ([]*HitBasket, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, label, display_name, description ` +
		`FROM public.hit_basket ` +
		`WHERE label = $1`

	// run query
	XOLog(sqlstr, label)
	q, err := db.Query(sqlstr, label)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*HitBasket{}
	for q.Next() {
		hb := HitBasket{
			_exists: true,
		}

		// scan
		err = q.Scan(&hb.ID, &hb.Label, &hb.DisplayName, &hb.Description)
		if err != nil {
			return nil, err
		}

		res = append(res, &hb)
	}

	return res, nil
}

// HitBasketByID retrieves a row from 'public.hit_basket' as a HitBasket.
//
// Generated from index 'hit_basket_pkey'.
func HitBasketByID(db XODB, id int) (*HitBasket, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, label, display_name, description ` +
		`FROM public.hit_basket ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	hb := HitBasket{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&hb.ID, &hb.Label, &hb.DisplayName, &hb.Description)
	if err != nil {
		return nil, err
	}

	return &hb, nil
}
