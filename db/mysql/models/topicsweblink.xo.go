// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// TopicsWeblink represents a row from 'enm.topics_weblinks'.
type TopicsWeblink struct {
	TopicID   int `json:"topic_id"`   // topic_id
	WeblinkID int `json:"weblink_id"` // weblink_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the TopicsWeblink exists in the database.
func (tw *TopicsWeblink) Exists() bool {
	return tw._exists
}

// Deleted provides information if the TopicsWeblink has been deleted from the database.
func (tw *TopicsWeblink) Deleted() bool {
	return tw._deleted
}

// Insert inserts the TopicsWeblink to the database.
func (tw *TopicsWeblink) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if tw._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO enm.topics_weblinks (` +
		`topic_id, weblink_id` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, tw.TopicID, tw.WeblinkID)
	_, err = db.Exec(sqlstr, tw.TopicID, tw.WeblinkID)
	if err != nil {
		return err
	}

	// set existence
	tw._exists = true

	return nil
}

// Update updates the TopicsWeblink in the database.
func (tw *TopicsWeblink) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tw._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if tw._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE enm.topics_weblinks SET ` +
		`topic_id = ?` +
		` WHERE weblink_id = ?`

	// run query
	XOLog(sqlstr, tw.TopicID, tw.WeblinkID)
	_, err = db.Exec(sqlstr, tw.TopicID, tw.WeblinkID)
	return err
}

// Save saves the TopicsWeblink to the database.
func (tw *TopicsWeblink) Save(db XODB) error {
	if tw.Exists() {
		return tw.Update(db)
	}

	return tw.Insert(db)
}

// Delete deletes the TopicsWeblink from the database.
func (tw *TopicsWeblink) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !tw._exists {
		return nil
	}

	// if deleted, bail
	if tw._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM enm.topics_weblinks WHERE weblink_id = ?`

	// run query
	XOLog(sqlstr, tw.WeblinkID)
	_, err = db.Exec(sqlstr, tw.WeblinkID)
	if err != nil {
		return err
	}

	// set deleted
	tw._deleted = true

	return nil
}

// Topic returns the Topic associated with the TopicsWeblink's TopicID (topic_id).
//
// Generated from foreign key 'fk__topics_weblinks__topics'.
func (tw *TopicsWeblink) Topic(db XODB) (*Topic, error) {
	return TopicByTctID(db, tw.TopicID)
}

// Weblink returns the Weblink associated with the TopicsWeblink's WeblinkID (weblink_id).
//
// Generated from foreign key 'fk__topics_weblinks__weblinks'.
func (tw *TopicsWeblink) Weblink(db XODB) (*Weblink, error) {
	return WeblinkByTctID(db, tw.WeblinkID)
}

// TopicsWeblinkByTopicIDWeblinkID retrieves a row from 'enm.topics_weblinks' as a TopicsWeblink.
//
// Generated from index 'idx_unique_topics_weblinks'.
func TopicsWeblinkByTopicIDWeblinkID(db XODB, topicID int, weblinkID int) (*TopicsWeblink, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`topic_id, weblink_id ` +
		`FROM enm.topics_weblinks ` +
		`WHERE topic_id = ? AND weblink_id = ?`

	// run query
	XOLog(sqlstr, topicID, weblinkID)
	tw := TopicsWeblink{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, topicID, weblinkID).Scan(&tw.TopicID, &tw.WeblinkID)
	if err != nil {
		return nil, err
	}

	return &tw, nil
}

// TopicsWeblinksByTopicID retrieves a row from 'enm.topics_weblinks' as a TopicsWeblink.
//
// Generated from index 'topic_id'.
func TopicsWeblinksByTopicID(db XODB, topicID int) ([]*TopicsWeblink, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`topic_id, weblink_id ` +
		`FROM enm.topics_weblinks ` +
		`WHERE topic_id = ?`

	// run query
	XOLog(sqlstr, topicID)
	q, err := db.Query(sqlstr, topicID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TopicsWeblink{}
	for q.Next() {
		tw := TopicsWeblink{
			_exists: true,
		}

		// scan
		err = q.Scan(&tw.TopicID, &tw.WeblinkID)
		if err != nil {
			return nil, err
		}

		res = append(res, &tw)
	}

	return res, nil
}

// TopicsWeblinkByWeblinkID retrieves a row from 'enm.topics_weblinks' as a TopicsWeblink.
//
// Generated from index 'topics_weblinks_weblink_id_pkey'.
func TopicsWeblinkByWeblinkID(db XODB, weblinkID int) (*TopicsWeblink, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`topic_id, weblink_id ` +
		`FROM enm.topics_weblinks ` +
		`WHERE weblink_id = ?`

	// run query
	XOLog(sqlstr, weblinkID)
	tw := TopicsWeblink{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, weblinkID).Scan(&tw.TopicID, &tw.WeblinkID)
	if err != nil {
		return nil, err
	}

	return &tw, nil
}

// TopicsWeblinksByWeblinkID retrieves a row from 'enm.topics_weblinks' as a TopicsWeblink.
//
// Generated from index 'weblink_id'.
func TopicsWeblinksByWeblinkID(db XODB, weblinkID int) ([]*TopicsWeblink, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`topic_id, weblink_id ` +
		`FROM enm.topics_weblinks ` +
		`WHERE weblink_id = ?`

	// run query
	XOLog(sqlstr, weblinkID)
	q, err := db.Query(sqlstr, weblinkID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*TopicsWeblink{}
	for q.Next() {
		tw := TopicsWeblink{
			_exists: true,
		}

		// scan
		err = q.Scan(&tw.TopicID, &tw.WeblinkID)
		if err != nil {
			return nil, err
		}

		res = append(res, &tw)
	}

	return res, nil
}
