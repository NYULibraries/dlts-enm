// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// EditorialReviewStatusState represents a row from 'enm.editorial_review_status_states'.
type EditorialReviewStatusState struct {
	ID    int    `json:"id"`    // id
	State string `json:"state"` // state

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the EditorialReviewStatusState exists in the database.
func (erss *EditorialReviewStatusState) Exists() bool {
	return erss._exists
}

// Deleted provides information if the EditorialReviewStatusState has been deleted from the database.
func (erss *EditorialReviewStatusState) Deleted() bool {
	return erss._deleted
}

// Insert inserts the EditorialReviewStatusState to the database.
func (erss *EditorialReviewStatusState) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if erss._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO enm.editorial_review_status_states (` +
		`id, state` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, erss.ID, erss.State)
	_, err = db.Exec(sqlstr, erss.ID, erss.State)
	if err != nil {
		return err
	}

	// set existence
	erss._exists = true

	return nil
}

// Update updates the EditorialReviewStatusState in the database.
func (erss *EditorialReviewStatusState) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !erss._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if erss._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE enm.editorial_review_status_states SET ` +
		`state = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, erss.State, erss.ID)
	_, err = db.Exec(sqlstr, erss.State, erss.ID)
	return err
}

// Save saves the EditorialReviewStatusState to the database.
func (erss *EditorialReviewStatusState) Save(db XODB) error {
	if erss.Exists() {
		return erss.Update(db)
	}

	return erss.Insert(db)
}

// Delete deletes the EditorialReviewStatusState from the database.
func (erss *EditorialReviewStatusState) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !erss._exists {
		return nil
	}

	// if deleted, bail
	if erss._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM enm.editorial_review_status_states WHERE id = ?`

	// run query
	XOLog(sqlstr, erss.ID)
	_, err = db.Exec(sqlstr, erss.ID)
	if err != nil {
		return err
	}

	// set deleted
	erss._deleted = true

	return nil
}

// EditorialReviewStatusStateByID retrieves a row from 'enm.editorial_review_status_states' as a EditorialReviewStatusState.
//
// Generated from index 'editorial_review_status_states_id_pkey'.
func EditorialReviewStatusStateByID(db XODB, id int) (*EditorialReviewStatusState, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, state ` +
		`FROM enm.editorial_review_status_states ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	erss := EditorialReviewStatusState{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&erss.ID, &erss.State)
	if err != nil {
		return nil, err
	}

	return &erss, nil
}
