// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// OtxXMLXmlpattern represents a row from 'public.otx_xml_xmlpattern'.
type OtxXMLXmlpattern struct {
	ID                   int    `json:"id"`                     // id
	Name                 string `json:"name"`                   // name
	XpathTitle           string `json:"xpath_title"`            // xpath_title
	XpathAuthor          string `json:"xpath_author"`           // xpath_author
	XpathLocations       string `json:"xpath_locations"`        // xpath_locations
	XpathContent         string `json:"xpath_content"`          // xpath_content
	XpathTopic           string `json:"xpath_topic"`            // xpath_topic
	XpathOccurrence      string `json:"xpath_occurrence"`       // xpath_occurrence
	XpathContentHeader   string `json:"xpath_content_header"`   // xpath_content_header
	XpathLocationLocalid string `json:"xpath_location_localid"` // xpath_location_localid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OtxXMLXmlpattern exists in the database.
func (oxx *OtxXMLXmlpattern) Exists() bool {
	return oxx._exists
}

// Deleted provides information if the OtxXMLXmlpattern has been deleted from the database.
func (oxx *OtxXMLXmlpattern) Deleted() bool {
	return oxx._deleted
}

// Insert inserts the OtxXMLXmlpattern to the database.
func (oxx *OtxXMLXmlpattern) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if oxx._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.otx_xml_xmlpattern (` +
		`name, xpath_title, xpath_author, xpath_locations, xpath_content, xpath_topic, xpath_occurrence, xpath_content_header, xpath_location_localid` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, oxx.Name, oxx.XpathTitle, oxx.XpathAuthor, oxx.XpathLocations, oxx.XpathContent, oxx.XpathTopic, oxx.XpathOccurrence, oxx.XpathContentHeader, oxx.XpathLocationLocalid)
	err = db.QueryRow(sqlstr, oxx.Name, oxx.XpathTitle, oxx.XpathAuthor, oxx.XpathLocations, oxx.XpathContent, oxx.XpathTopic, oxx.XpathOccurrence, oxx.XpathContentHeader, oxx.XpathLocationLocalid).Scan(&oxx.ID)
	if err != nil {
		return err
	}

	// set existence
	oxx._exists = true

	return nil
}

// Update updates the OtxXMLXmlpattern in the database.
func (oxx *OtxXMLXmlpattern) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !oxx._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if oxx._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.otx_xml_xmlpattern SET (` +
		`name, xpath_title, xpath_author, xpath_locations, xpath_content, xpath_topic, xpath_occurrence, xpath_content_header, xpath_location_localid` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE id = $10`

	// run query
	XOLog(sqlstr, oxx.Name, oxx.XpathTitle, oxx.XpathAuthor, oxx.XpathLocations, oxx.XpathContent, oxx.XpathTopic, oxx.XpathOccurrence, oxx.XpathContentHeader, oxx.XpathLocationLocalid, oxx.ID)
	_, err = db.Exec(sqlstr, oxx.Name, oxx.XpathTitle, oxx.XpathAuthor, oxx.XpathLocations, oxx.XpathContent, oxx.XpathTopic, oxx.XpathOccurrence, oxx.XpathContentHeader, oxx.XpathLocationLocalid, oxx.ID)
	return err
}

// Save saves the OtxXMLXmlpattern to the database.
func (oxx *OtxXMLXmlpattern) Save(db XODB) error {
	if oxx.Exists() {
		return oxx.Update(db)
	}

	return oxx.Insert(db)
}

// Upsert performs an upsert for OtxXMLXmlpattern.
//
// NOTE: PostgreSQL 9.5+ only
func (oxx *OtxXMLXmlpattern) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if oxx._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.otx_xml_xmlpattern (` +
		`id, name, xpath_title, xpath_author, xpath_locations, xpath_content, xpath_topic, xpath_occurrence, xpath_content_header, xpath_location_localid` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, name, xpath_title, xpath_author, xpath_locations, xpath_content, xpath_topic, xpath_occurrence, xpath_content_header, xpath_location_localid` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.name, EXCLUDED.xpath_title, EXCLUDED.xpath_author, EXCLUDED.xpath_locations, EXCLUDED.xpath_content, EXCLUDED.xpath_topic, EXCLUDED.xpath_occurrence, EXCLUDED.xpath_content_header, EXCLUDED.xpath_location_localid` +
		`)`

	// run query
	XOLog(sqlstr, oxx.ID, oxx.Name, oxx.XpathTitle, oxx.XpathAuthor, oxx.XpathLocations, oxx.XpathContent, oxx.XpathTopic, oxx.XpathOccurrence, oxx.XpathContentHeader, oxx.XpathLocationLocalid)
	_, err = db.Exec(sqlstr, oxx.ID, oxx.Name, oxx.XpathTitle, oxx.XpathAuthor, oxx.XpathLocations, oxx.XpathContent, oxx.XpathTopic, oxx.XpathOccurrence, oxx.XpathContentHeader, oxx.XpathLocationLocalid)
	if err != nil {
		return err
	}

	// set existence
	oxx._exists = true

	return nil
}

// Delete deletes the OtxXMLXmlpattern from the database.
func (oxx *OtxXMLXmlpattern) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !oxx._exists {
		return nil
	}

	// if deleted, bail
	if oxx._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.otx_xml_xmlpattern WHERE id = $1`

	// run query
	XOLog(sqlstr, oxx.ID)
	_, err = db.Exec(sqlstr, oxx.ID)
	if err != nil {
		return err
	}

	// set deleted
	oxx._deleted = true

	return nil
}

// OtxXMLXmlpatternsByName retrieves a row from 'public.otx_xml_xmlpattern' as a OtxXMLXmlpattern.
//
// Generated from index 'otx_xml_xmlpattern_name_4a38d220_like'.
func OtxXMLXmlpatternsByName(db XODB, name string) ([]*OtxXMLXmlpattern, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, xpath_title, xpath_author, xpath_locations, xpath_content, xpath_topic, xpath_occurrence, xpath_content_header, xpath_location_localid ` +
		`FROM public.otx_xml_xmlpattern ` +
		`WHERE name = $1`

	// run query
	XOLog(sqlstr, name)
	q, err := db.Query(sqlstr, name)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*OtxXMLXmlpattern{}
	for q.Next() {
		oxx := OtxXMLXmlpattern{
			_exists: true,
		}

		// scan
		err = q.Scan(&oxx.ID, &oxx.Name, &oxx.XpathTitle, &oxx.XpathAuthor, &oxx.XpathLocations, &oxx.XpathContent, &oxx.XpathTopic, &oxx.XpathOccurrence, &oxx.XpathContentHeader, &oxx.XpathLocationLocalid)
		if err != nil {
			return nil, err
		}

		res = append(res, &oxx)
	}

	return res, nil
}

// OtxXMLXmlpatternByName retrieves a row from 'public.otx_xml_xmlpattern' as a OtxXMLXmlpattern.
//
// Generated from index 'otx_xml_xmlpattern_name_key'.
func OtxXMLXmlpatternByName(db XODB, name string) (*OtxXMLXmlpattern, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, xpath_title, xpath_author, xpath_locations, xpath_content, xpath_topic, xpath_occurrence, xpath_content_header, xpath_location_localid ` +
		`FROM public.otx_xml_xmlpattern ` +
		`WHERE name = $1`

	// run query
	XOLog(sqlstr, name)
	oxx := OtxXMLXmlpattern{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&oxx.ID, &oxx.Name, &oxx.XpathTitle, &oxx.XpathAuthor, &oxx.XpathLocations, &oxx.XpathContent, &oxx.XpathTopic, &oxx.XpathOccurrence, &oxx.XpathContentHeader, &oxx.XpathLocationLocalid)
	if err != nil {
		return nil, err
	}

	return &oxx, nil
}

// OtxXMLXmlpatternByID retrieves a row from 'public.otx_xml_xmlpattern' as a OtxXMLXmlpattern.
//
// Generated from index 'otx_xml_xmlpattern_pkey'.
func OtxXMLXmlpatternByID(db XODB, id int) (*OtxXMLXmlpattern, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, xpath_title, xpath_author, xpath_locations, xpath_content, xpath_topic, xpath_occurrence, xpath_content_header, xpath_location_localid ` +
		`FROM public.otx_xml_xmlpattern ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	oxx := OtxXMLXmlpattern{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&oxx.ID, &oxx.Name, &oxx.XpathTitle, &oxx.XpathAuthor, &oxx.XpathLocations, &oxx.XpathContent, &oxx.XpathTopic, &oxx.XpathOccurrence, &oxx.XpathContentHeader, &oxx.XpathLocationLocalid)
	if err != nil {
		return nil, err
	}

	return &oxx, nil
}
