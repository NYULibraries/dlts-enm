// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// Relation represents a row from 'enm.relations'.
type Relation struct {
	TctID               int `json:"tct_id"`                // tct_id
	RelationTypeID      int `json:"relation_type_id"`      // relation_type_id
	RelationDirectionID int `json:"relation_direction_id"` // relation_direction_id
	RoleFromTopicID     int `json:"role_from_topic_id"`    // role_from_topic_id
	RoleToTopicID       int `json:"role_to_topic_id"`      // role_to_topic_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Relation exists in the database.
func (r *Relation) Exists() bool {
	return r._exists
}

// Deleted provides information if the Relation has been deleted from the database.
func (r *Relation) Deleted() bool {
	return r._deleted
}

// Insert inserts the Relation to the database.
func (r *Relation) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO enm.relations (` +
		`tct_id, relation_type_id, relation_direction_id, role_from_topic_id, role_to_topic_id` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, r.TctID, r.RelationTypeID, r.RelationDirectionID, r.RoleFromTopicID, r.RoleToTopicID)
	_, err = db.Exec(sqlstr, r.TctID, r.RelationTypeID, r.RelationDirectionID, r.RoleFromTopicID, r.RoleToTopicID)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Update updates the Relation in the database.
func (r *Relation) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE enm.relations SET ` +
		`relation_type_id = ?, relation_direction_id = ?, role_from_topic_id = ?, role_to_topic_id = ?` +
		` WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, r.RelationTypeID, r.RelationDirectionID, r.RoleFromTopicID, r.RoleToTopicID, r.TctID)
	_, err = db.Exec(sqlstr, r.RelationTypeID, r.RelationDirectionID, r.RoleFromTopicID, r.RoleToTopicID, r.TctID)
	return err
}

// Save saves the Relation to the database.
func (r *Relation) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Delete deletes the Relation from the database.
func (r *Relation) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM enm.relations WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, r.TctID)
	_, err = db.Exec(sqlstr, r.TctID)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// RelationDirection returns the RelationDirection associated with the Relation's RelationDirectionID (relation_direction_id).
//
// Generated from foreign key 'fk__relations__relation_direction'.
func (r *Relation) RelationDirection(db XODB) (*RelationDirection, error) {
	return RelationDirectionByID(db, r.RelationDirectionID)
}

// RelationType returns the RelationType associated with the Relation's RelationTypeID (relation_type_id).
//
// Generated from foreign key 'fk__relations__relation_type'.
func (r *Relation) RelationType(db XODB) (*RelationType, error) {
	return RelationTypeByTctID(db, r.RelationTypeID)
}

// TopicByRoleFromTopicID returns the Topic associated with the Relation's RoleFromTopicID (role_from_topic_id).
//
// Generated from foreign key 'fk__relations__topics__role_from'.
func (r *Relation) TopicByRoleFromTopicID(db XODB) (*Topic, error) {
	return TopicByTctID(db, r.RoleFromTopicID)
}

// TopicByRoleToTopicID returns the Topic associated with the Relation's RoleToTopicID (role_to_topic_id).
//
// Generated from foreign key 'fk__relations__topics__role_to'.
func (r *Relation) TopicByRoleToTopicID(db XODB) (*Topic, error) {
	return TopicByTctID(db, r.RoleToTopicID)
}

// RelationsByRelationDirectionID retrieves a row from 'enm.relations' as a Relation.
//
// Generated from index 'relation_direction_id'.
func RelationsByRelationDirectionID(db XODB, relationDirectionID int) ([]*Relation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, relation_type_id, relation_direction_id, role_from_topic_id, role_to_topic_id ` +
		`FROM enm.relations ` +
		`WHERE relation_direction_id = ?`

	// run query
	XOLog(sqlstr, relationDirectionID)
	q, err := db.Query(sqlstr, relationDirectionID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Relation{}
	for q.Next() {
		r := Relation{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.TctID, &r.RelationTypeID, &r.RelationDirectionID, &r.RoleFromTopicID, &r.RoleToTopicID)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RelationsByRelationTypeID retrieves a row from 'enm.relations' as a Relation.
//
// Generated from index 'relation_type_id'.
func RelationsByRelationTypeID(db XODB, relationTypeID int) ([]*Relation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, relation_type_id, relation_direction_id, role_from_topic_id, role_to_topic_id ` +
		`FROM enm.relations ` +
		`WHERE relation_type_id = ?`

	// run query
	XOLog(sqlstr, relationTypeID)
	q, err := db.Query(sqlstr, relationTypeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Relation{}
	for q.Next() {
		r := Relation{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.TctID, &r.RelationTypeID, &r.RelationDirectionID, &r.RoleFromTopicID, &r.RoleToTopicID)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RelationByTctID retrieves a row from 'enm.relations' as a Relation.
//
// Generated from index 'relations_tct_id_pkey'.
func RelationByTctID(db XODB, tctID int) (*Relation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, relation_type_id, relation_direction_id, role_from_topic_id, role_to_topic_id ` +
		`FROM enm.relations ` +
		`WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, tctID)
	r := Relation{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tctID).Scan(&r.TctID, &r.RelationTypeID, &r.RelationDirectionID, &r.RoleFromTopicID, &r.RoleToTopicID)
	if err != nil {
		return nil, err
	}

	return &r, nil
}

// RelationsByRoleFromTopicID retrieves a row from 'enm.relations' as a Relation.
//
// Generated from index 'role_from_topic_id'.
func RelationsByRoleFromTopicID(db XODB, roleFromTopicID int) ([]*Relation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, relation_type_id, relation_direction_id, role_from_topic_id, role_to_topic_id ` +
		`FROM enm.relations ` +
		`WHERE role_from_topic_id = ?`

	// run query
	XOLog(sqlstr, roleFromTopicID)
	q, err := db.Query(sqlstr, roleFromTopicID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Relation{}
	for q.Next() {
		r := Relation{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.TctID, &r.RelationTypeID, &r.RelationDirectionID, &r.RoleFromTopicID, &r.RoleToTopicID)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RelationsByRoleToTopicID retrieves a row from 'enm.relations' as a Relation.
//
// Generated from index 'role_to_topic_id'.
func RelationsByRoleToTopicID(db XODB, roleToTopicID int) ([]*Relation, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, relation_type_id, relation_direction_id, role_from_topic_id, role_to_topic_id ` +
		`FROM enm.relations ` +
		`WHERE role_to_topic_id = ?`

	// run query
	XOLog(sqlstr, roleToTopicID)
	q, err := db.Query(sqlstr, roleToTopicID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Relation{}
	for q.Next() {
		r := Relation{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.TctID, &r.RelationTypeID, &r.RelationDirectionID, &r.RoleFromTopicID, &r.RoleToTopicID)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}
