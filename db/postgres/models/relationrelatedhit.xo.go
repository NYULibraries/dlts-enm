// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// RelationRelatedhit represents a row from 'public.relation_relatedhit'.
type RelationRelatedhit struct {
	ID             int  `json:"id"`              // id
	DestinationID  int  `json:"destination_id"`  // destination_id
	RelationtypeID int  `json:"relationtype_id"` // relationtype_id
	SourceID       int  `json:"source_id"`       // source_id
	Forbidden      bool `json:"forbidden"`       // forbidden

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the RelationRelatedhit exists in the database.
func (rr *RelationRelatedhit) Exists() bool {
	return rr._exists
}

// Deleted provides information if the RelationRelatedhit has been deleted from the database.
func (rr *RelationRelatedhit) Deleted() bool {
	return rr._deleted
}

// Insert inserts the RelationRelatedhit to the database.
func (rr *RelationRelatedhit) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if rr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.relation_relatedhit (` +
		`destination_id, relationtype_id, source_id, forbidden` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, rr.DestinationID, rr.RelationtypeID, rr.SourceID, rr.Forbidden)
	err = db.QueryRow(sqlstr, rr.DestinationID, rr.RelationtypeID, rr.SourceID, rr.Forbidden).Scan(&rr.ID)
	if err != nil {
		return err
	}

	// set existence
	rr._exists = true

	return nil
}

// Update updates the RelationRelatedhit in the database.
func (rr *RelationRelatedhit) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rr._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if rr._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.relation_relatedhit SET (` +
		`destination_id, relationtype_id, source_id, forbidden` +
		`) = ( ` +
		`$1, $2, $3, $4` +
		`) WHERE id = $5`

	// run query
	XOLog(sqlstr, rr.DestinationID, rr.RelationtypeID, rr.SourceID, rr.Forbidden, rr.ID)
	_, err = db.Exec(sqlstr, rr.DestinationID, rr.RelationtypeID, rr.SourceID, rr.Forbidden, rr.ID)
	return err
}

// Save saves the RelationRelatedhit to the database.
func (rr *RelationRelatedhit) Save(db XODB) error {
	if rr.Exists() {
		return rr.Update(db)
	}

	return rr.Insert(db)
}

// Upsert performs an upsert for RelationRelatedhit.
//
// NOTE: PostgreSQL 9.5+ only
func (rr *RelationRelatedhit) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if rr._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.relation_relatedhit (` +
		`id, destination_id, relationtype_id, source_id, forbidden` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, destination_id, relationtype_id, source_id, forbidden` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.destination_id, EXCLUDED.relationtype_id, EXCLUDED.source_id, EXCLUDED.forbidden` +
		`)`

	// run query
	XOLog(sqlstr, rr.ID, rr.DestinationID, rr.RelationtypeID, rr.SourceID, rr.Forbidden)
	_, err = db.Exec(sqlstr, rr.ID, rr.DestinationID, rr.RelationtypeID, rr.SourceID, rr.Forbidden)
	if err != nil {
		return err
	}

	// set existence
	rr._exists = true

	return nil
}

// Delete deletes the RelationRelatedhit from the database.
func (rr *RelationRelatedhit) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !rr._exists {
		return nil
	}

	// if deleted, bail
	if rr._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.relation_relatedhit WHERE id = $1`

	// run query
	XOLog(sqlstr, rr.ID)
	_, err = db.Exec(sqlstr, rr.ID)
	if err != nil {
		return err
	}

	// set deleted
	rr._deleted = true

	return nil
}

// RelationRelationtype returns the RelationRelationtype associated with the RelationRelatedhit's RelationtypeID (relationtype_id).
//
// Generated from foreign key 'relation_r_relationtype_id_956b26fe_fk_relation_relationtype_id'.
func (rr *RelationRelatedhit) RelationRelationtype(db XODB) (*RelationRelationtype, error) {
	return RelationRelationtypeByID(db, rr.RelationtypeID)
}

// HitHitByDestinationID returns the HitHit associated with the RelationRelatedhit's DestinationID (destination_id).
//
// Generated from foreign key 'relation_relatedhit_destination_id_02e49528_fk_hit_hit_id'.
func (rr *RelationRelatedhit) HitHitByDestinationID(db XODB) (*HitHit, error) {
	return HitHitByID(db, rr.DestinationID)
}

// HitHitBySourceID returns the HitHit associated with the RelationRelatedhit's SourceID (source_id).
//
// Generated from foreign key 'relation_relatedhit_source_id_34d05a49_fk_hit_hit_id'.
func (rr *RelationRelatedhit) HitHitBySourceID(db XODB) (*HitHit, error) {
	return HitHitByID(db, rr.SourceID)
}

// RelationRelatedhitsBySourceID retrieves a row from 'public.relation_relatedhit' as a RelationRelatedhit.
//
// Generated from index 'relation_relatedhit_0afd9202'.
func RelationRelatedhitsBySourceID(db XODB, sourceID int) ([]*RelationRelatedhit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, destination_id, relationtype_id, source_id, forbidden ` +
		`FROM public.relation_relatedhit ` +
		`WHERE source_id = $1`

	// run query
	XOLog(sqlstr, sourceID)
	q, err := db.Query(sqlstr, sourceID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RelationRelatedhit{}
	for q.Next() {
		rr := RelationRelatedhit{
			_exists: true,
		}

		// scan
		err = q.Scan(&rr.ID, &rr.DestinationID, &rr.RelationtypeID, &rr.SourceID, &rr.Forbidden)
		if err != nil {
			return nil, err
		}

		res = append(res, &rr)
	}

	return res, nil
}

// RelationRelatedhitsByDestinationID retrieves a row from 'public.relation_relatedhit' as a RelationRelatedhit.
//
// Generated from index 'relation_relatedhit_279358a3'.
func RelationRelatedhitsByDestinationID(db XODB, destinationID int) ([]*RelationRelatedhit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, destination_id, relationtype_id, source_id, forbidden ` +
		`FROM public.relation_relatedhit ` +
		`WHERE destination_id = $1`

	// run query
	XOLog(sqlstr, destinationID)
	q, err := db.Query(sqlstr, destinationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RelationRelatedhit{}
	for q.Next() {
		rr := RelationRelatedhit{
			_exists: true,
		}

		// scan
		err = q.Scan(&rr.ID, &rr.DestinationID, &rr.RelationtypeID, &rr.SourceID, &rr.Forbidden)
		if err != nil {
			return nil, err
		}

		res = append(res, &rr)
	}

	return res, nil
}

// RelationRelatedhitsByRelationtypeID retrieves a row from 'public.relation_relatedhit' as a RelationRelatedhit.
//
// Generated from index 'relation_relatedhit_b763becd'.
func RelationRelatedhitsByRelationtypeID(db XODB, relationtypeID int) ([]*RelationRelatedhit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, destination_id, relationtype_id, source_id, forbidden ` +
		`FROM public.relation_relatedhit ` +
		`WHERE relationtype_id = $1`

	// run query
	XOLog(sqlstr, relationtypeID)
	q, err := db.Query(sqlstr, relationtypeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*RelationRelatedhit{}
	for q.Next() {
		rr := RelationRelatedhit{
			_exists: true,
		}

		// scan
		err = q.Scan(&rr.ID, &rr.DestinationID, &rr.RelationtypeID, &rr.SourceID, &rr.Forbidden)
		if err != nil {
			return nil, err
		}

		res = append(res, &rr)
	}

	return res, nil
}

// RelationRelatedhitByID retrieves a row from 'public.relation_relatedhit' as a RelationRelatedhit.
//
// Generated from index 'relation_relatedhit_pkey'.
func RelationRelatedhitByID(db XODB, id int) (*RelationRelatedhit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, destination_id, relationtype_id, source_id, forbidden ` +
		`FROM public.relation_relatedhit ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	rr := RelationRelatedhit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&rr.ID, &rr.DestinationID, &rr.RelationtypeID, &rr.SourceID, &rr.Forbidden)
	if err != nil {
		return nil, err
	}

	return &rr, nil
}

// RelationRelatedhitByRelationtypeIDSourceIDDestinationID retrieves a row from 'public.relation_relatedhit' as a RelationRelatedhit.
//
// Generated from index 'relation_relatedhit_relationtype_id_9d64c518_uniq'.
func RelationRelatedhitByRelationtypeIDSourceIDDestinationID(db XODB, relationtypeID int, sourceID int, destinationID int) (*RelationRelatedhit, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, destination_id, relationtype_id, source_id, forbidden ` +
		`FROM public.relation_relatedhit ` +
		`WHERE relationtype_id = $1 AND source_id = $2 AND destination_id = $3`

	// run query
	XOLog(sqlstr, relationtypeID, sourceID, destinationID)
	rr := RelationRelatedhit{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, relationtypeID, sourceID, destinationID).Scan(&rr.ID, &rr.DestinationID, &rr.RelationtypeID, &rr.SourceID, &rr.Forbidden)
	if err != nil {
		return nil, err
	}

	return &rr, nil
}
