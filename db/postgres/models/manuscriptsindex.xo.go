// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// ManuscriptsIndex represents a row from 'public.manuscripts_index'.
type ManuscriptsIndex struct {
	ID               int           `json:"id"`                // id
	RelativeLocation string        `json:"relative_location"` // relative_location
	EpubID           int           `json:"epub_id"`           // epub_id
	IndexpatternID   sql.NullInt64 `json:"indexpattern_id"`   // indexpattern_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the ManuscriptsIndex exists in the database.
func (mi *ManuscriptsIndex) Exists() bool {
	return mi._exists
}

// Deleted provides information if the ManuscriptsIndex has been deleted from the database.
func (mi *ManuscriptsIndex) Deleted() bool {
	return mi._deleted
}

// Insert inserts the ManuscriptsIndex to the database.
func (mi *ManuscriptsIndex) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if mi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.manuscripts_index (` +
		`relative_location, epub_id, indexpattern_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, mi.RelativeLocation, mi.EpubID, mi.IndexpatternID)
	err = db.QueryRow(sqlstr, mi.RelativeLocation, mi.EpubID, mi.IndexpatternID).Scan(&mi.ID)
	if err != nil {
		return err
	}

	// set existence
	mi._exists = true

	return nil
}

// Update updates the ManuscriptsIndex in the database.
func (mi *ManuscriptsIndex) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mi._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if mi._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.manuscripts_index SET (` +
		`relative_location, epub_id, indexpattern_id` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE id = $4`

	// run query
	XOLog(sqlstr, mi.RelativeLocation, mi.EpubID, mi.IndexpatternID, mi.ID)
	_, err = db.Exec(sqlstr, mi.RelativeLocation, mi.EpubID, mi.IndexpatternID, mi.ID)
	return err
}

// Save saves the ManuscriptsIndex to the database.
func (mi *ManuscriptsIndex) Save(db XODB) error {
	if mi.Exists() {
		return mi.Update(db)
	}

	return mi.Insert(db)
}

// Upsert performs an upsert for ManuscriptsIndex.
//
// NOTE: PostgreSQL 9.5+ only
func (mi *ManuscriptsIndex) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if mi._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.manuscripts_index (` +
		`id, relative_location, epub_id, indexpattern_id` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, relative_location, epub_id, indexpattern_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.relative_location, EXCLUDED.epub_id, EXCLUDED.indexpattern_id` +
		`)`

	// run query
	XOLog(sqlstr, mi.ID, mi.RelativeLocation, mi.EpubID, mi.IndexpatternID)
	_, err = db.Exec(sqlstr, mi.ID, mi.RelativeLocation, mi.EpubID, mi.IndexpatternID)
	if err != nil {
		return err
	}

	// set existence
	mi._exists = true

	return nil
}

// Delete deletes the ManuscriptsIndex from the database.
func (mi *ManuscriptsIndex) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !mi._exists {
		return nil
	}

	// if deleted, bail
	if mi._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.manuscripts_index WHERE id = $1`

	// run query
	XOLog(sqlstr, mi.ID)
	_, err = db.Exec(sqlstr, mi.ID)
	if err != nil {
		return err
	}

	// set deleted
	mi._deleted = true

	return nil
}

// ManuscriptsIndexpattern returns the ManuscriptsIndexpattern associated with the ManuscriptsIndex's IndexpatternID (indexpattern_id).
//
// Generated from foreign key 'manuscr_indexpattern_id_1891e852_fk_manuscripts_indexpattern_id'.
func (mi *ManuscriptsIndex) ManuscriptsIndexpattern(db XODB) (*ManuscriptsIndexpattern, error) {
	return ManuscriptsIndexpatternByID(db, int(mi.IndexpatternID.Int64))
}

// OccurrenceDocument returns the OccurrenceDocument associated with the ManuscriptsIndex's EpubID (epub_id).
//
// Generated from foreign key 'manuscripts_index_epub_id_99cb642d_fk_occurrence_document_id'.
func (mi *ManuscriptsIndex) OccurrenceDocument(db XODB) (*OccurrenceDocument, error) {
	return OccurrenceDocumentByID(db, mi.EpubID)
}

// ManuscriptsIndicesByIndexpatternID retrieves a row from 'public.manuscripts_index' as a ManuscriptsIndex.
//
// Generated from index 'manuscripts_index_10a61c0b'.
func ManuscriptsIndicesByIndexpatternID(db XODB, indexpatternID sql.NullInt64) ([]*ManuscriptsIndex, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, relative_location, epub_id, indexpattern_id ` +
		`FROM public.manuscripts_index ` +
		`WHERE indexpattern_id = $1`

	// run query
	XOLog(sqlstr, indexpatternID)
	q, err := db.Query(sqlstr, indexpatternID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ManuscriptsIndex{}
	for q.Next() {
		mi := ManuscriptsIndex{
			_exists: true,
		}

		// scan
		err = q.Scan(&mi.ID, &mi.RelativeLocation, &mi.EpubID, &mi.IndexpatternID)
		if err != nil {
			return nil, err
		}

		res = append(res, &mi)
	}

	return res, nil
}

// ManuscriptsIndicesByEpubID retrieves a row from 'public.manuscripts_index' as a ManuscriptsIndex.
//
// Generated from index 'manuscripts_index_68ad2686'.
func ManuscriptsIndicesByEpubID(db XODB, epubID int) ([]*ManuscriptsIndex, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, relative_location, epub_id, indexpattern_id ` +
		`FROM public.manuscripts_index ` +
		`WHERE epub_id = $1`

	// run query
	XOLog(sqlstr, epubID)
	q, err := db.Query(sqlstr, epubID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*ManuscriptsIndex{}
	for q.Next() {
		mi := ManuscriptsIndex{
			_exists: true,
		}

		// scan
		err = q.Scan(&mi.ID, &mi.RelativeLocation, &mi.EpubID, &mi.IndexpatternID)
		if err != nil {
			return nil, err
		}

		res = append(res, &mi)
	}

	return res, nil
}

// ManuscriptsIndexByID retrieves a row from 'public.manuscripts_index' as a ManuscriptsIndex.
//
// Generated from index 'manuscripts_index_pkey'.
func ManuscriptsIndexByID(db XODB, id int) (*ManuscriptsIndex, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, relative_location, epub_id, indexpattern_id ` +
		`FROM public.manuscripts_index ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	mi := ManuscriptsIndex{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&mi.ID, &mi.RelativeLocation, &mi.EpubID, &mi.IndexpatternID)
	if err != nil {
		return nil, err
	}

	return &mi, nil
}
