// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// OccurrenceDocument represents a row from 'public.occurrence_document'.
type OccurrenceDocument struct {
	ID     int            `json:"id"`     // id
	Title  sql.NullString `json:"title"`  // title
	Author sql.NullString `json:"author"` // author

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the OccurrenceDocument exists in the database.
func (od *OccurrenceDocument) Exists() bool {
	return od._exists
}

// Deleted provides information if the OccurrenceDocument has been deleted from the database.
func (od *OccurrenceDocument) Deleted() bool {
	return od._deleted
}

// Insert inserts the OccurrenceDocument to the database.
func (od *OccurrenceDocument) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if od._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.occurrence_document (` +
		`title, author` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, od.Title, od.Author)
	err = db.QueryRow(sqlstr, od.Title, od.Author).Scan(&od.ID)
	if err != nil {
		return err
	}

	// set existence
	od._exists = true

	return nil
}

// Update updates the OccurrenceDocument in the database.
func (od *OccurrenceDocument) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !od._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if od._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.occurrence_document SET (` +
		`title, author` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE id = $3`

	// run query
	XOLog(sqlstr, od.Title, od.Author, od.ID)
	_, err = db.Exec(sqlstr, od.Title, od.Author, od.ID)
	return err
}

// Save saves the OccurrenceDocument to the database.
func (od *OccurrenceDocument) Save(db XODB) error {
	if od.Exists() {
		return od.Update(db)
	}

	return od.Insert(db)
}

// Upsert performs an upsert for OccurrenceDocument.
//
// NOTE: PostgreSQL 9.5+ only
func (od *OccurrenceDocument) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if od._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.occurrence_document (` +
		`id, title, author` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, title, author` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.title, EXCLUDED.author` +
		`)`

	// run query
	XOLog(sqlstr, od.ID, od.Title, od.Author)
	_, err = db.Exec(sqlstr, od.ID, od.Title, od.Author)
	if err != nil {
		return err
	}

	// set existence
	od._exists = true

	return nil
}

// Delete deletes the OccurrenceDocument from the database.
func (od *OccurrenceDocument) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !od._exists {
		return nil
	}

	// if deleted, bail
	if od._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.occurrence_document WHERE id = $1`

	// run query
	XOLog(sqlstr, od.ID)
	_, err = db.Exec(sqlstr, od.ID)
	if err != nil {
		return err
	}

	// set deleted
	od._deleted = true

	return nil
}

// OccurrenceDocumentByID retrieves a row from 'public.occurrence_document' as a OccurrenceDocument.
//
// Generated from index 'occurrence_document_pkey'.
func OccurrenceDocumentByID(db XODB, id int) (*OccurrenceDocument, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, title, author ` +
		`FROM public.occurrence_document ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	od := OccurrenceDocument{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&od.ID, &od.Title, &od.Author)
	if err != nil {
		return nil, err
	}

	return &od, nil
}
