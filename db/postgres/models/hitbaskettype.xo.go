// Package models contains the types for schema 'public'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"errors"
)

// HitBasketType represents a row from 'public.hit_basket_types'.
type HitBasketType struct {
	ID       int `json:"id"`        // id
	BasketID int `json:"basket_id"` // basket_id
	TtypeID  int `json:"ttype_id"`  // ttype_id

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the HitBasketType exists in the database.
func (hbt *HitBasketType) Exists() bool {
	return hbt._exists
}

// Deleted provides information if the HitBasketType has been deleted from the database.
func (hbt *HitBasketType) Deleted() bool {
	return hbt._deleted
}

// Insert inserts the HitBasketType to the database.
func (hbt *HitBasketType) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if hbt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by sequence
	const sqlstr = `INSERT INTO public.hit_basket_types (` +
		`basket_id, ttype_id` +
		`) VALUES (` +
		`$1, $2` +
		`) RETURNING id`

	// run query
	XOLog(sqlstr, hbt.BasketID, hbt.TtypeID)
	err = db.QueryRow(sqlstr, hbt.BasketID, hbt.TtypeID).Scan(&hbt.ID)
	if err != nil {
		return err
	}

	// set existence
	hbt._exists = true

	return nil
}

// Update updates the HitBasketType in the database.
func (hbt *HitBasketType) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hbt._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if hbt._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.hit_basket_types SET (` +
		`basket_id, ttype_id` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE id = $3`

	// run query
	XOLog(sqlstr, hbt.BasketID, hbt.TtypeID, hbt.ID)
	_, err = db.Exec(sqlstr, hbt.BasketID, hbt.TtypeID, hbt.ID)
	return err
}

// Save saves the HitBasketType to the database.
func (hbt *HitBasketType) Save(db XODB) error {
	if hbt.Exists() {
		return hbt.Update(db)
	}

	return hbt.Insert(db)
}

// Upsert performs an upsert for HitBasketType.
//
// NOTE: PostgreSQL 9.5+ only
func (hbt *HitBasketType) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if hbt._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.hit_basket_types (` +
		`id, basket_id, ttype_id` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (id) DO UPDATE SET (` +
		`id, basket_id, ttype_id` +
		`) = (` +
		`EXCLUDED.id, EXCLUDED.basket_id, EXCLUDED.ttype_id` +
		`)`

	// run query
	XOLog(sqlstr, hbt.ID, hbt.BasketID, hbt.TtypeID)
	_, err = db.Exec(sqlstr, hbt.ID, hbt.BasketID, hbt.TtypeID)
	if err != nil {
		return err
	}

	// set existence
	hbt._exists = true

	return nil
}

// Delete deletes the HitBasketType from the database.
func (hbt *HitBasketType) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !hbt._exists {
		return nil
	}

	// if deleted, bail
	if hbt._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.hit_basket_types WHERE id = $1`

	// run query
	XOLog(sqlstr, hbt.ID)
	_, err = db.Exec(sqlstr, hbt.ID)
	if err != nil {
		return err
	}

	// set deleted
	hbt._deleted = true

	return nil
}

// HitBasket returns the HitBasket associated with the HitBasketType's BasketID (basket_id).
//
// Generated from foreign key 'hit_basket_types_basket_id_09a8db59_fk_hit_basket_id'.
func (hbt *HitBasketType) HitBasket(db XODB) (*HitBasket, error) {
	return HitBasketByID(db, hbt.BasketID)
}

// TopicTtype returns the TopicTtype associated with the HitBasketType's TtypeID (ttype_id).
//
// Generated from foreign key 'hit_basket_types_ttype_id_bf919b76_fk_topic_ttype_id'.
func (hbt *HitBasketType) TopicTtype(db XODB) (*TopicTtype, error) {
	return TopicTtypeByID(db, hbt.TtypeID)
}

// HitBasketTypesByBasketID retrieves a row from 'public.hit_basket_types' as a HitBasketType.
//
// Generated from index 'hit_basket_types_afdeaea9'.
func HitBasketTypesByBasketID(db XODB, basketID int) ([]*HitBasketType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, basket_id, ttype_id ` +
		`FROM public.hit_basket_types ` +
		`WHERE basket_id = $1`

	// run query
	XOLog(sqlstr, basketID)
	q, err := db.Query(sqlstr, basketID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*HitBasketType{}
	for q.Next() {
		hbt := HitBasketType{
			_exists: true,
		}

		// scan
		err = q.Scan(&hbt.ID, &hbt.BasketID, &hbt.TtypeID)
		if err != nil {
			return nil, err
		}

		res = append(res, &hbt)
	}

	return res, nil
}

// HitBasketTypeByBasketIDTtypeID retrieves a row from 'public.hit_basket_types' as a HitBasketType.
//
// Generated from index 'hit_basket_types_basket_id_6391d845_uniq'.
func HitBasketTypeByBasketIDTtypeID(db XODB, basketID int, ttypeID int) (*HitBasketType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, basket_id, ttype_id ` +
		`FROM public.hit_basket_types ` +
		`WHERE basket_id = $1 AND ttype_id = $2`

	// run query
	XOLog(sqlstr, basketID, ttypeID)
	hbt := HitBasketType{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, basketID, ttypeID).Scan(&hbt.ID, &hbt.BasketID, &hbt.TtypeID)
	if err != nil {
		return nil, err
	}

	return &hbt, nil
}

// HitBasketTypesByTtypeID retrieves a row from 'public.hit_basket_types' as a HitBasketType.
//
// Generated from index 'hit_basket_types_fd9cb799'.
func HitBasketTypesByTtypeID(db XODB, ttypeID int) ([]*HitBasketType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, basket_id, ttype_id ` +
		`FROM public.hit_basket_types ` +
		`WHERE ttype_id = $1`

	// run query
	XOLog(sqlstr, ttypeID)
	q, err := db.Query(sqlstr, ttypeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*HitBasketType{}
	for q.Next() {
		hbt := HitBasketType{
			_exists: true,
		}

		// scan
		err = q.Scan(&hbt.ID, &hbt.BasketID, &hbt.TtypeID)
		if err != nil {
			return nil, err
		}

		res = append(res, &hbt)
	}

	return res, nil
}

// HitBasketTypeByID retrieves a row from 'public.hit_basket_types' as a HitBasketType.
//
// Generated from index 'hit_basket_types_pkey'.
func HitBasketTypeByID(db XODB, id int) (*HitBasketType, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, basket_id, ttype_id ` +
		`FROM public.hit_basket_types ` +
		`WHERE id = $1`

	// run query
	XOLog(sqlstr, id)
	hbt := HitBasketType{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&hbt.ID, &hbt.BasketID, &hbt.TtypeID)
	if err != nil {
		return nil, err
	}

	return &hbt, nil
}
