// Package models contains the types for schema 'enm'.
package models

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql"
	"errors"
)

// Occurrence represents a row from 'enm.occurrences'.
type Occurrence struct {
	TctID      int           `json:"tct_id"`      // tct_id
	LocationID int           `json:"location_id"` // location_id
	TopicID    int           `json:"topic_id"`    // topic_id
	RingNext   sql.NullInt64 `json:"ring_next"`   // ring_next
	RingPrev   sql.NullInt64 `json:"ring_prev"`   // ring_prev

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Occurrence exists in the database.
func (o *Occurrence) Exists() bool {
	return o._exists
}

// Deleted provides information if the Occurrence has been deleted from the database.
func (o *Occurrence) Deleted() bool {
	return o._deleted
}

// Insert inserts the Occurrence to the database.
func (o *Occurrence) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if o._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO enm.occurrences (` +
		`tct_id, location_id, topic_id, ring_next, ring_prev` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, o.TctID, o.LocationID, o.TopicID, o.RingNext, o.RingPrev)
	_, err = db.Exec(sqlstr, o.TctID, o.LocationID, o.TopicID, o.RingNext, o.RingPrev)
	if err != nil {
		return err
	}

	// set existence
	o._exists = true

	return nil
}

// Update updates the Occurrence in the database.
func (o *Occurrence) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if o._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE enm.occurrences SET ` +
		`location_id = ?, topic_id = ?, ring_next = ?, ring_prev = ?` +
		` WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, o.LocationID, o.TopicID, o.RingNext, o.RingPrev, o.TctID)
	_, err = db.Exec(sqlstr, o.LocationID, o.TopicID, o.RingNext, o.RingPrev, o.TctID)
	return err
}

// Save saves the Occurrence to the database.
func (o *Occurrence) Save(db XODB) error {
	if o.Exists() {
		return o.Update(db)
	}

	return o.Insert(db)
}

// Delete deletes the Occurrence from the database.
func (o *Occurrence) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !o._exists {
		return nil
	}

	// if deleted, bail
	if o._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM enm.occurrences WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, o.TctID)
	_, err = db.Exec(sqlstr, o.TctID)
	if err != nil {
		return err
	}

	// set deleted
	o._deleted = true

	return nil
}

// Location returns the Location associated with the Occurrence's LocationID (location_id).
//
// Generated from foreign key 'fk__occurrences__locations'.
func (o *Occurrence) Location(db XODB) (*Location, error) {
	return LocationByTctID(db, o.LocationID)
}

// Topic returns the Topic associated with the Occurrence's TopicID (topic_id).
//
// Generated from foreign key 'fk__occurrences__topics'.
func (o *Occurrence) Topic(db XODB) (*Topic, error) {
	return TopicByTctID(db, o.TopicID)
}

// OccurrencesByLocationID retrieves a row from 'enm.occurrences' as a Occurrence.
//
// Generated from index 'location_id'.
func OccurrencesByLocationID(db XODB, locationID int) ([]*Occurrence, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, location_id, topic_id, ring_next, ring_prev ` +
		`FROM enm.occurrences ` +
		`WHERE location_id = ?`

	// run query
	XOLog(sqlstr, locationID)
	q, err := db.Query(sqlstr, locationID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Occurrence{}
	for q.Next() {
		o := Occurrence{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.TctID, &o.LocationID, &o.TopicID, &o.RingNext, &o.RingPrev)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OccurrenceByTctID retrieves a row from 'enm.occurrences' as a Occurrence.
//
// Generated from index 'occurrences_tct_id_pkey'.
func OccurrenceByTctID(db XODB, tctID int) (*Occurrence, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, location_id, topic_id, ring_next, ring_prev ` +
		`FROM enm.occurrences ` +
		`WHERE tct_id = ?`

	// run query
	XOLog(sqlstr, tctID)
	o := Occurrence{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, tctID).Scan(&o.TctID, &o.LocationID, &o.TopicID, &o.RingNext, &o.RingPrev)
	if err != nil {
		return nil, err
	}

	return &o, nil
}

// OccurrencesByRingNext retrieves a row from 'enm.occurrences' as a Occurrence.
//
// Generated from index 'ring_next'.
func OccurrencesByRingNext(db XODB, ringNext sql.NullInt64) ([]*Occurrence, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, location_id, topic_id, ring_next, ring_prev ` +
		`FROM enm.occurrences ` +
		`WHERE ring_next = ?`

	// run query
	XOLog(sqlstr, ringNext)
	q, err := db.Query(sqlstr, ringNext)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Occurrence{}
	for q.Next() {
		o := Occurrence{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.TctID, &o.LocationID, &o.TopicID, &o.RingNext, &o.RingPrev)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OccurrencesByRingPrev retrieves a row from 'enm.occurrences' as a Occurrence.
//
// Generated from index 'ring_prev'.
func OccurrencesByRingPrev(db XODB, ringPrev sql.NullInt64) ([]*Occurrence, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, location_id, topic_id, ring_next, ring_prev ` +
		`FROM enm.occurrences ` +
		`WHERE ring_prev = ?`

	// run query
	XOLog(sqlstr, ringPrev)
	q, err := db.Query(sqlstr, ringPrev)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Occurrence{}
	for q.Next() {
		o := Occurrence{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.TctID, &o.LocationID, &o.TopicID, &o.RingNext, &o.RingPrev)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}

// OccurrencesByTopicID retrieves a row from 'enm.occurrences' as a Occurrence.
//
// Generated from index 'topic_id'.
func OccurrencesByTopicID(db XODB, topicID int) ([]*Occurrence, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`tct_id, location_id, topic_id, ring_next, ring_prev ` +
		`FROM enm.occurrences ` +
		`WHERE topic_id = ?`

	// run query
	XOLog(sqlstr, topicID)
	q, err := db.Query(sqlstr, topicID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Occurrence{}
	for q.Next() {
		o := Occurrence{
			_exists: true,
		}

		// scan
		err = q.Scan(&o.TctID, &o.LocationID, &o.TopicID, &o.RingNext, &o.RingPrev)
		if err != nil {
			return nil, err
		}

		res = append(res, &o)
	}

	return res, nil
}
